--------------------------------------------------------
--  File created - Wednesday-April-30-2014   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table CSED_DELINQUENT_CHILD_SUPPORT
--------------------------------------------------------

  CREATE TABLE "USTB"."CSED_DELINQUENT_CHILD_SUPPORT" 
   (	"CS_WORKER" VARCHAR2(3), 
	"CS_ID" VARCHAR2(7), 
	"LAST_NAME" VARCHAR2(16), 
	"FIRST_NAME" VARCHAR2(15), 
	"MID_INITIAL" CHAR(1), 
	"SSN" VARCHAR2(9), 
	"BIRTH_DATE" DATE, 
	"ADDRESS1" VARCHAR2(32), 
	"ADDRESS2" VARCHAR2(32), 
	"CITY" VARCHAR2(30), 
	"STATE" CHAR(2), 
	"ZIP_CODE" VARCHAR2(9), 
	"USER_LAST_UPDT" VARCHAR2(10), 
	"TMSP_LAST_UPDT" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table EPA_ENV_INTEREST_MAP
--------------------------------------------------------

  CREATE TABLE "USTB"."EPA_ENV_INTEREST_MAP" 
   (	"USER_GROUP_ID" CHAR(3), 
	"INFORMATIONSYSTEMACRONYMNAME" VARCHAR2(20), 
	"ENVIRONMENTALINTERESTTYPETEXT" VARCHAR2(60), 
	"FEDERALSTATEINTERESTINDICATOR" CHAR(1), 
	"INTERESTSTARTDATEQUALIFIERTEXT" VARCHAR2(50), 
	"INTERESTENDDATEQUALIFIERTEXT" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table FIELD_OFFICE_ADDRESS
--------------------------------------------------------

  CREATE TABLE "USTB"."FIELD_OFFICE_ADDRESS" 
   (	"FIELD_OFFICE_CODE" CHAR(3), 
	"MAILING_ADDRESS_LINE_1" VARCHAR2(100), 
	"MAILING_ADDRESS_LINE_2" VARCHAR2(100), 
	"MAILING_ADDRESS_LINE_3" VARCHAR2(100), 
	"MAILING_ADDRESS_MUNICIPALITY" VARCHAR2(100), 
	"MAILING_ADDRESS_STATE_CODE" CHAR(2), 
	"MAILING_ADDRESS_ZIP" CHAR(9), 
	"PHONE" NUMBER(10,0), 
	"FAX" NUMBER(10,0)
   ) ;
--------------------------------------------------------
--  DDL for Table FRST_FACILITYSITE_NEW
--------------------------------------------------------

  CREATE TABLE "USTB"."FRST_FACILITYSITE_NEW" 
   (	"FACILITYREGISTRYIDENTIFIER" VARCHAR2(12), 
	"FACILITYSITENAME" VARCHAR2(80), 
	"FACILITYSITETYPENAME" VARCHAR2(40), 
	"FEDERALFACILITYINDICATOR" CHAR(1), 
	"TRIBALLANDINDICATOR" CHAR(1), 
	"TRIBALLANDNAME" VARCHAR2(200), 
	"CONGRESSIONALDISTRICTNUMBER" VARCHAR2(2), 
	"LEGISLATIVEDISTRICTNUMBER" VARCHAR2(2), 
	"HUCCODE" VARCHAR2(8), 
	"LOCATIONADDRESSTEXT" VARCHAR2(50), 
	"SUPPLEMENTALLOCATIONTEXT" VARCHAR2(50), 
	"LOCALITYNAME" VARCHAR2(60), 
	"COUNTYSTATEFIPSCODE" VARCHAR2(5), 
	"COUNTYNAME" VARCHAR2(35), 
	"STATEUSPSCODE" CHAR(2), 
	"STATENAME" VARCHAR2(35), 
	"COUNTRYNAME" VARCHAR2(44), 
	"LOCATIONZIPCODE" VARCHAR2(14), 
	"LOCATIONDESCRIPTIONTEXT" VARCHAR2(256), 
	"DATASOURCENAME" VARCHAR2(50), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_ALTERNATIVENAME
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_ALTERNATIVENAME" 
   (	"ALTERNATIVENAME" VARCHAR2(80), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(25), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_ALTERNATIVENAME
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_ALTERNATIVENAME" 
   (	"ALTERNATIVENAME" VARCHAR2(80), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(25), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_DELETEDFACILITIES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_DELETEDFACILITIES" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(30), 
	"DELETEDONDATE" VARCHAR2(10)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_ENVIRONMENTALINTEREST
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_ENVIRONMENTALINTEREST" 
   (	"INFORMATIONSYSTEMACRONYMNAME" VARCHAR2(20), 
	"INFORMATIONSYSTEMIDENTIFIER" VARCHAR2(30), 
	"ENVIRONMENTALINTERESTTYPETEXT" VARCHAR2(60), 
	"FEDERALSTATEINTERESTINDICATOR" CHAR(1), 
	"ENVIRONMENTALINTERESTSTARTDATE" VARCHAR2(10), 
	"INTERESTSTARTDATEQUALIFIERTEXT" VARCHAR2(50), 
	"ENVIRONMENTALINTERESTENDDATE" VARCHAR2(10), 
	"INTERESTENDDATEQUALIFIERTEXT" VARCHAR2(50), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30), 
	"FRSINDICATOR" NUMBER(1,0), 
	"DOHINDICATOR" NUMBER(1,0)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_FACILITYSITE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_FACILITYSITE" 
   (	"FACILITYREGISTRYIDENTIFIER" VARCHAR2(12), 
	"FACILITYSITENAME" VARCHAR2(80), 
	"FACILITYSITETYPENAME" VARCHAR2(40), 
	"FEDERALFACILITYINDICATOR" CHAR(1), 
	"TRIBALLANDINDICATOR" CHAR(1), 
	"TRIBALLANDNAME" VARCHAR2(200), 
	"CONGRESSIONALDISTRICTNUMBER" VARCHAR2(2), 
	"LEGISLATIVEDISTRICTNUMBER" VARCHAR2(2), 
	"HUCCODE" VARCHAR2(8), 
	"LOCATIONADDRESSTEXT" VARCHAR2(50), 
	"SUPPLEMENTALLOCATIONTEXT" VARCHAR2(50), 
	"LOCALITYNAME" VARCHAR2(60), 
	"COUNTYSTATEFIPSCODE" VARCHAR2(5), 
	"COUNTYNAME" VARCHAR2(35), 
	"STATEUSPSCODE" CHAR(2), 
	"STATENAME" VARCHAR2(35), 
	"COUNTRYNAME" VARCHAR2(44), 
	"LOCATIONZIPCODE" VARCHAR2(14), 
	"LOCATIONDESCRIPTIONTEXT" VARCHAR2(256), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30), 
	"SOURCEOFDATA" VARCHAR2(255), 
	"ALTERNATIVENAME" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_GEOGRAPHICCOORDINATES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_GEOGRAPHICCOORDINATES" 
   (	"LATITUDEMEASURE" VARCHAR2(10), 
	"LONGITUDEMEASURE" VARCHAR2(11), 
	"HORIZONTALACCURACYMEASURE" VARCHAR2(6), 
	"HORIZONTALCOLLECTIONMETHODTEXT" VARCHAR2(60), 
	"HORIZONTALREFERENCEDATUMNAME" VARCHAR2(7), 
	"SOURCEMAPSCALENUMBER" VARCHAR2(10), 
	"REFERENCEPOINTTEXT" VARCHAR2(60), 
	"DATACOLLECTIONDATE" VARCHAR2(10), 
	"GEOMETRICTYPENAME" VARCHAR2(6), 
	"LOCATIONCOMMENTSTEXT" VARCHAR2(150), 
	"VERTICALCOLLECTIONMETHODTEXT" VARCHAR2(60), 
	"VERTICALMEASURE" VARCHAR2(10), 
	"VERTICALACCURACYMEASURE" VARCHAR2(8), 
	"VERTICALREFERENCEDATUMNAME" VARCHAR2(17), 
	"COORDINATEDATASOURCENAME" VARCHAR2(35), 
	"SUBENTITYIDENTIFIER" VARCHAR2(30), 
	"SUBENTITYTYPENAME" VARCHAR2(4), 
	"DATASOURCENAME" VARCHAR2(25), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_INDIVIDUAL
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_INDIVIDUAL" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"INDIVIDUALFULLNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"INDIVIDUALTITLETEXT" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_MAILING_ADDRESS
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_MAILING_ADDRESS" 
   (	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"MAILINGADDRESSTEXT" VARCHAR2(50), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(50), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(30), 
	"MAILINGADDRESSSTATEUSPSCODE" CHAR(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(35), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(44), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(14), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_NAICSCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_NAICSCODE" 
   (	"NAICSCODE" VARCHAR2(6), 
	"NAICSPRIMARYINDICATOR" VARCHAR2(10), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_ORGANIZATION
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_ORGANIZATION" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"ORGANIZATIONFORMALNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"ORGANIZATIONDUNSNUMBER" VARCHAR2(9), 
	"ORGANIZATIONTYPETEXT" VARCHAR2(255), 
	"EMPLOYERIDENTIFIER" VARCHAR2(255), 
	"STATEBUSINESSIDENTIFIER" VARCHAR2(255), 
	"ULTIMATEPARENTNAME" VARCHAR2(255), 
	"ULTIMATEPARENTDUNSNUMBER" VARCHAR2(9), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_BK_SICCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_BK_SICCODE" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"SICCODE" VARCHAR2(4), 
	"SICPRIMARYINDICATOR" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_DELETEDFACILITIES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_DELETEDFACILITIES" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"DELETEDONDATE" VARCHAR2(10)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_ENVIRONMENTALINTEREST
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_ENVIRONMENTALINTEREST" 
   (	"INFORMATIONSYSTEMACRONYMNAME" VARCHAR2(255), 
	"INFORMATIONSYSTEMIDENTIFIER" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTTYPETEXT" VARCHAR2(255), 
	"FEDERALSTATEINTERESTINDICATOR" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTSTARTDATE" VARCHAR2(10), 
	"INTERESTSTARTDATEQUALIFIERTEXT" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTENDDATE" VARCHAR2(10), 
	"INTERESTENDDATEQUALIFIERTEXT" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"FRSINDICATOR" NUMBER(1,0) DEFAULT 0, 
	"DOHINDICATOR" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_FACILITYSITE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_FACILITYSITE" 
   (	"FACILITYREGISTRYIDENTIFIER" VARCHAR2(255), 
	"FACILITYSITENAME" VARCHAR2(255), 
	"FACILITYSITETYPENAME" VARCHAR2(255), 
	"FEDERALFACILITYINDICATOR" VARCHAR2(255), 
	"TRIBALLANDINDICATOR" VARCHAR2(255), 
	"TRIBALLANDNAME" VARCHAR2(255), 
	"CONGRESSIONALDISTRICTNUMBER" VARCHAR2(2), 
	"LEGISLATIVEDISTRICTNUMBER" VARCHAR2(2), 
	"HUCCODE" VARCHAR2(8), 
	"LOCATIONADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALLOCATIONTEXT" VARCHAR2(255), 
	"LOCALITYNAME" VARCHAR2(255), 
	"COUNTYSTATEFIPSCODE" VARCHAR2(5), 
	"COUNTYNAME" VARCHAR2(255), 
	"STATEUSPSCODE" VARCHAR2(2), 
	"STATENAME" VARCHAR2(255), 
	"COUNTRYNAME" VARCHAR2(255), 
	"LOCATIONZIPCODE" VARCHAR2(255), 
	"LOCATIONDESCRIPTIONTEXT" VARCHAR2(255), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"SOURCEOFDATA" VARCHAR2(255), 
	"ALTERNATIVENAME" VARCHAR2(255), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_GEOGRAPHICCOORDINATES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_GEOGRAPHICCOORDINATES" 
   (	"LATITUDEMEASURE" NUMBER(8,6), 
	"LONGITUDEMEASURE" NUMBER(9,6), 
	"HORIZONTALACCURACYMEASURE" NUMBER(22,0), 
	"HORIZONTALCOLLECTIONMETHODTEXT" VARCHAR2(255), 
	"HORIZONTALREFERENCEDATUMNAME" VARCHAR2(255), 
	"SOURCEMAPSCALENUMBER" NUMBER(22,0), 
	"REFERENCEPOINTTEXT" VARCHAR2(255), 
	"DATACOLLECTIONDATE" VARCHAR2(10), 
	"GEOMETRICTYPENAME" VARCHAR2(255), 
	"LOCATIONCOMMENTSTEXT" VARCHAR2(255), 
	"VERTICALCOLLECTIONMETHODTEXT" VARCHAR2(255), 
	"VERTICALMEASURE" VARCHAR2(10), 
	"VERTICALACCURACYMEASURE" VARCHAR2(8), 
	"VERTICALREFERENCEDATUMNAME" VARCHAR2(255), 
	"DATASOURCENAME" VARCHAR2(255), 
	"COORDINATEDATASOURCENAME" VARCHAR2(255), 
	"SUBENTITYIDENTIFIER" VARCHAR2(255), 
	"SUBENTITYTYPENAME" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_HORIZCOLLMETHODLOOKUP
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_HORIZCOLLMETHODLOOKUP" 
   (	"DEC_CODE" VARCHAR2(20), 
	"DEC_DESCRIPTION" VARCHAR2(80), 
	"EPA_DESCRIPTION" VARCHAR2(60), 
	"EPA_CODE" VARCHAR2(3)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_INDIVIDUAL
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_INDIVIDUAL" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"INDIVIDUALFULLNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"INDIVIDUALTITLETEXT" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_MAILING_ADDRESS
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_MAILING_ADDRESS" 
   (	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"MAILINGADDRESSTEXT" VARCHAR2(50), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(50), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(30), 
	"MAILINGADDRESSSTATEUSPSCODE" CHAR(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(35), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(44), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(14), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_NAICSCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_NAICSCODE" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"NAICSCODE" VARCHAR2(6), 
	"NAICSPRIMARYINDICATOR" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_ORGANIZATION
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_ORGANIZATION" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"ORGANIZATIONFORMALNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"ORGANIZATIONDUNSNUMBER" VARCHAR2(9), 
	"ORGANIZATIONTYPETEXT" VARCHAR2(255), 
	"EMPLOYERIDENTIFIER" VARCHAR2(255), 
	"STATEBUSINESSIDENTIFIER" VARCHAR2(255), 
	"ULTIMATEPARENTNAME" VARCHAR2(255), 
	"ULTIMATEPARENTDUNSNUMBER" VARCHAR2(9), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_REF_HORIZCOLMETHTXT
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_REF_HORIZCOLMETHTXT" 
   (	"COORDINATE_SYSTEM_CODE" CHAR(2), 
	"COORDINATE_SYSTEM_DESC" VARCHAR2(50), 
	"HORIZONTALCOLLECTIONMETHODTEXT" VARCHAR2(60)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_REF_HORIZREFDAT
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_REF_HORIZREFDAT" 
   (	"COORDINATE_ORG_CODE" CHAR(3), 
	"COORDINATE_ORG_DESC" VARCHAR2(50), 
	"HORIZONTALREFERENCEDATUMNAME" VARCHAR2(7)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_REF_REFPOINTTXT
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_REF_REFPOINTTXT" 
   (	"REF_POINT_CODE" CHAR(3), 
	"REF_POINT_DESC" VARCHAR2(50), 
	"REFERENCEPOINTTEXT" VARCHAR2(60)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_REF_VERTCOLMETHTXT
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_REF_VERTCOLMETHTXT" 
   (	"Z_COORDINATE_METHOD_CODE" CHAR(2), 
	"Z_COORDINATE_METHOD_DESC" VARCHAR2(50), 
	"VERTICALCOLLECTIONMETHODTEXT" VARCHAR2(60)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_SICCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_SICCODE" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"SICCODE" VARCHAR2(4), 
	"SICPRIMARYINDICATOR" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_ALTERNATIVENAME
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_ALTERNATIVENAME" 
   (	"ALTERNATIVENAME" VARCHAR2(80), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(25), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_CHANGES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_CHANGES" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_ENVIRONMENTALINTEREST
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_ENVIRONMENTALINTEREST" 
   (	"INFORMATIONSYSTEMACRONYMNAME" VARCHAR2(255), 
	"INFORMATIONSYSTEMIDENTIFIER" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTTYPETEXT" VARCHAR2(255), 
	"FEDERALSTATEINTERESTINDICATOR" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTSTARTDATE" VARCHAR2(10), 
	"INTERESTSTARTDATEQUALIFIERTEXT" VARCHAR2(255), 
	"ENVIRONMENTALINTERESTENDDATE" VARCHAR2(10), 
	"INTERESTENDDATEQUALIFIERTEXT" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"FRSINDICATOR" NUMBER(1,0) DEFAULT 0, 
	"DOHINDICATOR" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_FACILITYSITE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_FACILITYSITE" 
   (	"FACILITYREGISTRYIDENTIFIER" VARCHAR2(255), 
	"FACILITYSITENAME" VARCHAR2(255), 
	"FACILITYSITETYPENAME" VARCHAR2(255), 
	"FEDERALFACILITYINDICATOR" VARCHAR2(255), 
	"TRIBALLANDINDICATOR" VARCHAR2(255), 
	"TRIBALLANDNAME" VARCHAR2(255), 
	"CONGRESSIONALDISTRICTNUMBER" VARCHAR2(2), 
	"LEGISLATIVEDISTRICTNUMBER" VARCHAR2(2), 
	"HUCCODE" VARCHAR2(8), 
	"LOCATIONADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALLOCATIONTEXT" VARCHAR2(255), 
	"LOCALITYNAME" VARCHAR2(255), 
	"COUNTYSTATEFIPSCODE" VARCHAR2(5), 
	"COUNTYNAME" VARCHAR2(255), 
	"STATEUSPSCODE" VARCHAR2(2), 
	"STATENAME" VARCHAR2(255), 
	"COUNTRYNAME" VARCHAR2(255), 
	"LOCATIONZIPCODE" VARCHAR2(255), 
	"LOCATIONDESCRIPTIONTEXT" VARCHAR2(255), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"SOURCEOFDATA" VARCHAR2(255), 
	"ALTERNATIVENAME" VARCHAR2(255), 
	"ALTERNATIVENAMETYPETEXT" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_GEOGRAPHICCOORDINATES
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_GEOGRAPHICCOORDINATES" 
   (	"LATITUDEMEASURE" NUMBER(8,6), 
	"LONGITUDEMEASURE" NUMBER(9,6), 
	"HORIZONTALACCURACYMEASURE" NUMBER(22,0), 
	"HORIZONTALCOLLECTIONMETHODTEXT" VARCHAR2(255), 
	"HORIZONTALREFERENCEDATUMNAME" VARCHAR2(255), 
	"SOURCEMAPSCALENUMBER" NUMBER(22,0), 
	"REFERENCEPOINTTEXT" VARCHAR2(255), 
	"DATACOLLECTIONDATE" VARCHAR2(10), 
	"GEOMETRICTYPENAME" VARCHAR2(255), 
	"LOCATIONCOMMENTSTEXT" VARCHAR2(255), 
	"VERTICALCOLLECTIONMETHODTEXT" VARCHAR2(255), 
	"VERTICALMEASURE" VARCHAR2(10), 
	"VERTICALACCURACYMEASURE" VARCHAR2(8), 
	"VERTICALREFERENCEDATUMNAME" VARCHAR2(255), 
	"DATASOURCENAME" VARCHAR2(255), 
	"COORDINATEDATASOURCENAME" VARCHAR2(255), 
	"SUBENTITYIDENTIFIER" VARCHAR2(255), 
	"SUBENTITYTYPENAME" VARCHAR2(255), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_INDIVIDUAL
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_INDIVIDUAL" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"INDIVIDUALFULLNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"INDIVIDUALTITLETEXT" VARCHAR2(255), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_MAILING_ADDRESS
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_MAILING_ADDRESS" 
   (	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"MAILINGADDRESSTEXT" VARCHAR2(50), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(50), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(30), 
	"MAILINGADDRESSSTATEUSPSCODE" CHAR(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(35), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(44), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(14), 
	"DATASOURCENAME" VARCHAR2(25), 
	"LASTREPORTEDDATE" VARCHAR2(10), 
	"STATEFACILITYSYSTEMACRONYMNAME" VARCHAR2(20), 
	"STATEFACILITYIDENTIFIER" VARCHAR2(30)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_NAICSCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_NAICSCODE" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"NAICSCODE" VARCHAR2(6), 
	"NAICSPRIMARYINDICATOR" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_ORGANIZATION
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_ORGANIZATION" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"ORGANIZATIONFORMALNAME" VARCHAR2(255), 
	"AFFILIATIONTYPETEXT" VARCHAR2(255), 
	"AFFILIATIONSTARTDATE" VARCHAR2(10), 
	"AFFILIATIONENDDATE" VARCHAR2(10), 
	"EMAILADDRESSTEXT" VARCHAR2(255), 
	"TELEPHONENUMBER" VARCHAR2(255), 
	"PHONEEXTENSION" VARCHAR2(255), 
	"FAXNUMBER" VARCHAR2(255), 
	"ALTERNATETELEPHONENUMBER" VARCHAR2(255), 
	"ORGANIZATIONDUNSNUMBER" VARCHAR2(9), 
	"ORGANIZATIONTYPETEXT" VARCHAR2(255), 
	"EMPLOYERIDENTIFIER" VARCHAR2(255), 
	"STATEBUSINESSIDENTIFIER" VARCHAR2(255), 
	"ULTIMATEPARENTNAME" VARCHAR2(255), 
	"ULTIMATEPARENTDUNSNUMBER" VARCHAR2(9), 
	"MAILINGADDRESSTEXT" VARCHAR2(255), 
	"SUPPLEMENTALADDRESSTEXT" VARCHAR2(255), 
	"MAILINGADDRESSCITYNAME" VARCHAR2(255), 
	"MAILINGADDRESSSTATEUSPSCODE" VARCHAR2(2), 
	"MAILINGADDRESSSTATENAME" VARCHAR2(255), 
	"MAILINGADDRESSCOUNTRYNAME" VARCHAR2(255), 
	"MAILINGADDRESSZIPCODE" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table FRS_TMP_SICCODE
--------------------------------------------------------

  CREATE TABLE "USTB"."FRS_TMP_SICCODE" 
   (	"STATEFACILITYIDENTIFIER" VARCHAR2(255), 
	"SICCODE" VARCHAR2(4), 
	"SICPRIMARYINDICATOR" VARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_FACILITIES1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_FACILITIES1" 
   (	"ID" VARCHAR2(100), 
	"AI_ID" NUMBER(10,0), 
	"FACILITY_NAME" VARCHAR2(50), 
	"ADDRESS1" VARCHAR2(50), 
	"ADDRESS2" VARCHAR2(50), 
	"CITY" VARCHAR2(50), 
	"STATE" CHAR(2), 
	"ZIP" CHAR(9), 
	"OWNER_ID" NUMBER, 
	"INDIAN" CHAR(1), 
	"USER_MODIFIED" VARCHAR2(10), 
	"DATE_MODIFIED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_LOG_TABLE
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_LOG_TABLE" 
   (	"PKG_PROC" VARCHAR2(30), 
	"CODE" NUMBER(10,0), 
	"MESSAGE" VARCHAR2(240), 
	"DESCRIPTION" VARCHAR2(240), 
	"CREATED" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(30) DEFAULT user
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_LUST_RELEASES1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_LUST_RELEASES1" 
   (	"ID" VARCHAR2(100), 
	"OLD_NAME" VARCHAR2(50), 
	"FACILITY_ID" VARCHAR2(100), 
	"STAFF_NAME" VARCHAR2(201), 
	"RESPONSIBLE_PARTY" VARCHAR2(201), 
	"USER_MODIFIED" VARCHAR2(10), 
	"DATE_MODIFIED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_LUST_STATUS1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_LUST_STATUS1" 
   (	"REL_ID" VARCHAR2(100), 
	"OLD_STATUS_CODE" VARCHAR2(5), 
	"STATUS_CODE" CHAR(3), 
	"STATUS_DESC" VARCHAR2(40), 
	"DATE_CREATED" DATE, 
	"COMMENTS" VARCHAR2(240)
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_OPERATORS1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_OPERATORS1" 
   (	"ID" VARCHAR2(10), 
	"OPERATOR_NAME" VARCHAR2(50), 
	"ADDRESS1" VARCHAR2(50), 
	"ADDRESS2" VARCHAR2(50), 
	"CITY" VARCHAR2(25), 
	"STATE" CHAR(2), 
	"ZIP" VARCHAR2(5), 
	"PHONE_NUMBER" VARCHAR2(15), 
	"DATE_CREATED" DATE, 
	"USER_MODIFIED" VARCHAR2(10), 
	"DATE_MODIFIED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_OWNERS1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_OWNERS1" 
   (	"ID" NUMBER, 
	"PER_ID" NUMBER, 
	"ORG_ID" NUMBER, 
	"OWNER_NAME" VARCHAR2(50), 
	"ADDRESS1" VARCHAR2(50), 
	"ADDRESS2" VARCHAR2(50), 
	"CITY" VARCHAR2(25), 
	"STATE" CHAR(2), 
	"ZIP" VARCHAR2(5), 
	"PHONE_NUMBER" VARCHAR2(15), 
	"DATE_CREATED" DATE, 
	"USER_MODIFIED" VARCHAR2(10), 
	"DATE_MODIFIED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table ONESTOP_UST_LOCATIONS1
--------------------------------------------------------

  CREATE TABLE "USTB"."ONESTOP_UST_LOCATIONS1" 
   (	"ID" NUMBER, 
	"AI_ID" NUMBER(10,0), 
	"NAME" VARCHAR2(50), 
	"ADDRESS1" VARCHAR2(50), 
	"ADDRESS2" VARCHAR2(50), 
	"CITY" VARCHAR2(50), 
	"STATE" CHAR(2), 
	"ZIP" CHAR(9), 
	"COUNTY" VARCHAR2(25), 
	"DISTRICT" VARCHAR2(3), 
	"LAT_DEGREES" NUMBER(3,0), 
	"LAT_MINUTES" NUMBER(2,0), 
	"LAT_SECONDS" NUMBER(6,4), 
	"LON_DEGREES" NUMBER(3,0), 
	"LON_MINUTES" NUMBER(2,0), 
	"LON_SECONDS" NUMBER(6,4), 
	"LAT_DEGREES_DECIMAL" NUMBER, 
	"LON_DEGREES_DECIMAL" NUMBER, 
	"LL_DATE" DATE, 
	"LL_METHOD" VARCHAR2(50), 
	"LL_DESCRIPTION" VARCHAR2(50), 
	"LL_DATUM" VARCHAR2(50), 
	"LL_ACCURACY" VARCHAR2(5), 
	"USER_MODIFIED" VARCHAR2(10), 
	"DATE_MODIFIED" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table PLAN_TABLE
--------------------------------------------------------

  CREATE TABLE "USTB"."PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(80), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(30), 
	"OBJECT_NAME" VARCHAR2(30), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(30), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TABLE1
--------------------------------------------------------

  CREATE TABLE "USTB"."TABLE1" 
   (	"COLUMN1" VARCHAR2(20), 
	"COLUMN2" DATE
   ) ;
















































--------------------------------------------------------
--  DDL for Index CSED_SSN_IND
--------------------------------------------------------

  CREATE INDEX "USTB"."CSED_SSN_IND" ON "USTB"."CSED_DELINQUENT_CHILD_SUPPORT" ("SSN") 
  ;
--------------------------------------------------------
--  DDL for Index FIELD_ADDRESS_OFFICE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."FIELD_ADDRESS_OFFICE_PK" ON "USTB"."FIELD_OFFICE_ADDRESS" ("FIELD_OFFICE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_IDX9
--------------------------------------------------------

  CREATE INDEX "USTB"."FRS_IDX9" ON "USTB"."FRS_ALTERNATIVENAME" ("LASTREPORTEDDATE", "STATEFACILITYIDENTIFIER") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_REF_HORIZCOLMETHTXT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."FRS_REF_HORIZCOLMETHTXT_PK" ON "USTB"."FRS_REF_HORIZCOLMETHTXT" ("COORDINATE_SYSTEM_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_REF_HORIZREFDAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."FRS_REF_HORIZREFDAT_PK" ON "USTB"."FRS_REF_HORIZREFDAT" ("COORDINATE_ORG_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_REF_REFPOINTTXT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."FRS_REF_REFPOINTTXT_PK" ON "USTB"."FRS_REF_REFPOINTTXT" ("REF_POINT_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_REF_VERTCOLMETHTXT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."FRS_REF_VERTCOLMETHTXT_PK" ON "USTB"."FRS_REF_VERTCOLMETHTXT" ("Z_COORDINATE_METHOD_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index ONESTOP_OWNERS1_IDX1
--------------------------------------------------------

  CREATE INDEX "USTB"."ONESTOP_OWNERS1_IDX1" ON "USTB"."ONESTOP_OWNERS1" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00116295
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00116295" ON "USTB"."FRS_DELETEDFACILITIES" ("STATEFACILITYIDENTIFIER") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117306
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117306" ON "USTB"."FRS_FACILITYSITE" ("STATEFACILITYIDENTIFIER") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117310
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117310" ON "USTB"."FRS_TMP_FACILITYSITE" ("STATEFACILITYIDENTIFIER") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117313
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117313" ON "USTB"."FRS_SICCODE" ("STATEFACILITYIDENTIFIER", "SICCODE") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117316
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117316" ON "USTB"."FRS_TMP_SICCODE" ("STATEFACILITYIDENTIFIER", "SICCODE") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117319
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117319" ON "USTB"."FRS_NAICSCODE" ("STATEFACILITYIDENTIFIER", "NAICSCODE") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C00117322
--------------------------------------------------------

  CREATE UNIQUE INDEX "USTB"."SYS_C00117322" ON "USTB"."FRS_TMP_NAICSCODE" ("STATEFACILITYIDENTIFIER", "NAICSCODE") 
  ;
















































--------------------------------------------------------
--  DDL for View VIEW_POD_TANK_TYPES
--------------------------------------------------------

  CREATE OR REPLACE VIEW "USTB"."VIEW_POD_TANK_TYPES" ("MASTER_AI_ID", "ATTRIBUTE_DESC_CODE", "ATTRIBUTE_CODE", "SUB_ATTRIBUTE_CODE", "SUBJECT_ITEM_CATEOGRY_CODE", "SUBJECT_ITEM_ID", "ATTRIBUTE_DESC_DESC") AS 
  SELECT DISTINCT
 -- ***********************************************************************
 -- VIEW_POD_TANK_TYPES
 --
 -- Description: A view to return the Attribute_Desc_Code and Master_AI_ID
 --               for tank types
 --
 -- Modification History:
 -- Programmer   Date  Description
 -- --------------   ---------- ----------------------------------
 -- Elizabeth Contreras      11/30/2004 Original script
 --      Elizabeth Contreras      12/09/2004     Modified Script-Added SUBJECT_ITEM_ID
 -- ***********************************************************************
TEMPO.SUBJ_ITEM_ATTRIBUTE.MASTER_AI_ID,
TEMPO.SUBJ_ITEM_ATTRIBUTE.ATTRIBUTE_DESC_CODE,
TEMPO.SUBJ_ITEM_ATTRIBUTE.ATTRIBUTE_CODE,
TEMPO.SUBJ_ITEM_ATTRIBUTE.SUB_ATTRIBUTE_CODE,
TEMPO.SUBJ_ITEM_ATTRIBUTE.SUBJECT_ITEM_CATEGORY_CODE,
TEMPO.SUBJ_ITEM_ATTRIBUTE.SUBJECT_ITEM_ID,
TEMPO.MTB_ATTRIBUTE_DESC.ATTRIBUTE_DESC_DESC
FROM
TEMPO.SUBJ_ITEM_ATTRIBUTE, TEMPO.MTB_ATTRIBUTE_DESC
WHERE
(TEMPO.SUBJ_ITEM_ATTRIBUTE.INT_DOC_ID='0') AND
(TEMPO.SUBJ_ITEM_ATTRIBUTE.ATTRIBUTE_CODE='F09') AND
(TEMPO.SUBJ_ITEM_ATTRIBUTE.SUB_ATTRIBUTE_CODE='C09') AND
(TEMPO.SUBJ_ITEM_ATTRIBUTE.ATTRIBUTE_DESC_CODE IS NOT NULL)AND
(TEMPO.SUBJ_ITEM_ATTRIBUTE.ATTRIBUTE_DESC_CODE=TEMPO.MTB_ATTRIBUTE_DESC.ATTRIBUTE_DESC_CODE)
ORDER BY 2;
--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_AI_NAMES
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_AI_NAMES" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_fod_ai_names
--
-- Description: Gets the alt historic AI type(s) and name
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  12/20/04  Original Author
-- ***********************************************************************
ls_return  varchar2(420);
ls_no_data_found varchar2(3);
ld_rec_count     number;
cursor ai_types  is
  select distinct replace(t2.ai_type_description, 'FOOD-', '')
   || ': ' || t1.alternate_ai_name facility_name
  from tempo.agency_interest_alt t1,
       tempo.mtb_ai_type t2
  where t1.master_ai_id = a_ai_id
  and t1.int_doc_id = 0
  and t1.end_date is null
  and t1.alternate_ai_type_code = t2.ai_type_code
  and upper(t2.ai_type_description) like 'FOOD%'
  order by 1;

BEGIN
  ld_rec_count := 0;
  ls_return := '';
  for c_rec in ai_types
  loop
     if ld_rec_count = 0 then
       ls_return := c_rec.facility_name;
     else
       ls_return := ls_return || chr(13) || chr(10) || c_rec.facility_name;
     end if;
     ld_rec_count := ld_rec_count + 1;
  end loop;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_ai_names;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_AI_TYPES
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_AI_TYPES" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_fod_ai_types
--
-- Description: Gets the alt historic AI type(s)
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  09/30/04  Original Author
-- ***********************************************************************
ls_return  varchar2(420);
ls_no_data_found varchar2(3);
ld_rec_count     number;
cursor ai_types  is
  select distinct t2.ai_type_description
  from tempo.agency_interest_alt t1,
       tempo.mtb_ai_type t2
  where t1.master_ai_id = a_ai_id
  and t1.int_doc_id = 0
  and t1.end_date is null
  and t1.alternate_ai_type_code = t2.ai_type_code
  and upper(t2.ai_type_description) like 'FOOD%'
  order by t2.ai_type_description;

BEGIN
  ld_rec_count := 0;
  ls_return := '';
  for c_rec in ai_types
  loop
     if ld_rec_count = 0 then
       ls_return := c_rec.ai_type_description;
     else
       ls_return := ls_return || chr(13) || chr(10) || c_rec.ai_type_description;
     end if;
     ld_rec_count := ld_rec_count + 1;
  end loop;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_ai_types;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_BILLING_PARTY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_BILLING_PARTY" 
(a_ai_id      in   tempo.agency_interest.master_ai_id%type)
 return varchar2 is
-- ***********************************************************************
--	FUNCTION func_get_fod_billing_party
--
--	Description: if there is only one primary billing party relationship at the	
--	   agency interest level return the name and address
--         return UNKNOWN if no relationships exist
--         return AMBIGUOUS if more than one exists
--
--	Parameters:	ai_id
--
--	Returns: 	string
--
--	Modification History:
--	Programmer		Date			Description
--	--------------	        --------		----------------
--	Cathy Perrodin		11/12/04		Original Author
-- ***********************************************************************
ls_return	 varchar2(550);
ls_no_data_found varchar2(8);
ld_rec_count_p     number;
ld_rec_count_o     number;
ld_master_person_id tempo.agency_interest_person_xref.master_person_id%type;
ld_master_org_id tempo.agency_interest_org_xref.master_org_id%type;
BEGIN
ls_no_data_found := 'UNKNOWN';
--get count of primary billing party relationships
select count(*) into ld_rec_count_p
from tempo.agency_interest_person_xref 
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='zz'
  and end_date is null;
select count(*) into ld_rec_count_o
from tempo.agency_interest_org_xref 
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='fu'
  and end_date is null;   
if ld_rec_count_p = 0 and ld_rec_count_o = 0 then
  return 'UNKNOWN';  
elsif ld_rec_count_p = 1 and ld_rec_count_o = 0 then
  select master_person_id into ld_master_person_id
  from tempo.agency_interest_person_xref 
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='zz'
    and end_date is null;
  select master_person_first_name||' '|| master_person_last_name ||  
      decode(t2.mailing_address_line_1,null,null,
        chr(13) || chr(10) || t2.mailing_address_line_1) ||
      decode(t2.mailing_address_line_2, null, null,
        chr(13) || chr(10) || t2.mailing_address_line_2) ||
      decode(t2.mailing_address_line_3, null, null,
        chr(13) || chr(10) ||t2.mailing_address_line_3 ) ||
      decode(t2.mailing_address_municipality, null, null,
        chr(13) || chr(10) ||t2.mailing_address_municipality) ||  
      decode(t2.mailing_address_state_code, null, null,
        ', ' || t2.mailing_address_state_code) ||  
      decode(t2.mailing_address_zip, null, null,
        ' ' || substr(t2.mailing_address_zip, 1, 5)) 
  into ls_return
  from tempo.person t1,
  tempo.person_address t2
  where t1.master_person_id = ld_master_person_id
  and t1.int_doc_id = 0
  and t1.master_person_id = t2.master_person_id(+)
  and t1.int_doc_id = t2.int_doc_id(+);
  return ls_return; 
elsif ld_rec_count_p = 0 and ld_rec_count_o = 1 then
  select master_org_id into ld_master_org_id
  from tempo.agency_interest_org_xref 
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='fu'
    and end_date is null;
  select master_org_name ||  
      decode(t2.mailing_address_line_1,null,null,
        chr(13) || chr(10) || t2.mailing_address_line_1) ||
      decode(t2.mailing_address_line_2, null, null,
        chr(13) || chr(10) || t2.mailing_address_line_2) ||
      decode(t2.mailing_address_line_3, null, null,
        chr(13) || chr(10) ||t2.mailing_address_line_3 ) ||
      decode(t2.mailing_address_municipality, null, null,
        chr(13) || chr(10) ||t2.mailing_address_municipality) ||  
      decode(t2.mailing_address_state_code, null, null,
        ', ' || t2.mailing_address_state_code) ||  
      decode(t2.mailing_address_zip, null, null,
        ' ' || substr(t2.mailing_address_zip, 1, 5)) 
  into ls_return
  from tempo.organization t1,
  tempo.organization_address t2
  where t1.master_org_id = ld_master_org_id
  and t1.int_doc_id = 0
  and t1.master_org_id = t2.master_org_id(+)
  and t1.int_doc_id = t2.int_doc_id(+);  
  return ls_return;    
elsif ld_rec_count_p + ld_rec_count_o > 1 then
  return 'AMBIGUOUS'; 
end if;  
EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_billing_party;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_BILLING_PARTY_2
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_BILLING_PARTY_2" 
(a_ai_id      in   tempo.agency_interest.master_ai_id%type)
 return varchar2 is
-- ***********************************************************************
--	FUNCTION func_get_fod_billing_party_2
--
--	Description: if there is only one primary billing party relationship at the	
--	   agency interest level return the name and address
--         return UNKNOWN if no relationships exist
--         return AMBIGUOUS if more than one exists
--
--	Parameters:	ai_id
--
--	Returns: 	string
--
--	Modification History:
--	Programmer		Date			Description
--	--------------	        --------		----------------
--	Cathy Perrodin		01/31/05		Original Author
-- ***********************************************************************
ls_return	 varchar2(550);
ls_no_data_found varchar2(8);
ld_rec_count_p     number;
ld_rec_count_o     number;
ld_master_person_id tempo.agency_interest_person_xref.master_person_id%type;
ld_master_org_id tempo.agency_interest_org_xref.master_org_id%type;
BEGIN
ls_no_data_found := 'UNKNOWN';
--get count of primary billing party relationships
select count(*) into ld_rec_count_p
from tempo.agency_interest_person_xref 
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='zz'
  and end_date is null;
select count(*) into ld_rec_count_o
from tempo.agency_interest_org_xref 
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='fu'
  and end_date is null;   
if ld_rec_count_p = 0 and ld_rec_count_o = 0 then
  return 'UNKNOWN';  
elsif ld_rec_count_p = 1 and ld_rec_count_o = 0 then
  select master_person_id into ld_master_person_id
  from tempo.agency_interest_person_xref 
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='zz'
    and end_date is null;
  select t1.master_person_first_name||' '|| t1.master_person_last_name || 
       ' (' || to_char(t1.master_person_id) ||')          ' ||
      decode(t2.mailing_address_line_1,null,null,
        ', ' || t2.mailing_address_line_1) ||
      decode(t2.mailing_address_line_2, null, null,
        ', ' || t2.mailing_address_line_2) ||
      decode(t2.mailing_address_line_3, null, null,
        ', ' ||t2.mailing_address_line_3 ) ||
      decode(t2.mailing_address_municipality, null, null,
        ', ' ||t2.mailing_address_municipality) ||  
      decode(t2.mailing_address_state_code, null, null,
        ', ' || t2.mailing_address_state_code) ||  
      decode(t2.mailing_address_zip, null, null,
        ' ' || substr(t2.mailing_address_zip, 1, 5)) 
  into ls_return
  from tempo.person t1,
  tempo.person_address t2
  where t1.master_person_id = ld_master_person_id
  and t1.int_doc_id = 0
  and t1.master_person_id = t2.master_person_id(+)
  and t1.int_doc_id = t2.int_doc_id(+);
  return ls_return; 
elsif ld_rec_count_p = 0 and ld_rec_count_o = 1 then
  select master_org_id into ld_master_org_id
  from tempo.agency_interest_org_xref 
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='fu'
    and end_date is null;
  select t1.master_org_name ||  
      ' (' || to_char(t1.master_org_id) ||')          ' ||
      decode(t2.mailing_address_line_1,null,null,
        ', ' || t2.mailing_address_line_1) ||
      decode(t2.mailing_address_line_2, null, null,
        ', ' || t2.mailing_address_line_2) ||
      decode(t2.mailing_address_line_3, null, null,
        ', ' ||t2.mailing_address_line_3 ) ||
      decode(t2.mailing_address_municipality, null, null,
        ', ' ||t2.mailing_address_municipality) ||  
      decode(t2.mailing_address_state_code, null, null,
        ', ' || t2.mailing_address_state_code) ||  
      decode(t2.mailing_address_zip, null, null,
        ' ' || substr(t2.mailing_address_zip, 1, 5)) 
  into ls_return
  from tempo.organization t1,
  tempo.organization_address t2
  where t1.master_org_id = ld_master_org_id
  and t1.int_doc_id = 0
  and t1.master_org_id = t2.master_org_id(+)
  and t1.int_doc_id = t2.int_doc_id(+);  
  return ls_return;    
elsif ld_rec_count_p + ld_rec_count_o > 1 then
  return 'AMBIGUOUS'; 
end if;  
EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_billing_party_2;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_BILLING_PARTY_3
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_BILLING_PARTY_3" 
(a_ai_id      in   tempo.agency_interest.master_ai_id%type)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_fod_billing_party_3
--
-- Description: if there is only one primary billing party relationship at the
--    agency interest level return the name
--         return UNKNOWN if no relationships exist
--         return AMBIGUOUS if more than one exists
--
-- Parameters: ai_id
--
-- Returns:  string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  01/31/05  Original Author
-- ***********************************************************************
ls_return  varchar2(550);
ls_no_data_found varchar2(8);
ld_rec_count_p     number;
ld_rec_count_o     number;
ld_master_person_id tempo.agency_interest_person_xref.master_person_id%type;
ld_master_org_id tempo.agency_interest_org_xref.master_org_id%type;

BEGIN
ls_no_data_found := 'UNKNOWN';
--get count of primary billing party relationships
select count(*) into ld_rec_count_p
from tempo.agency_interest_person_xref
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='zz'
  and end_date is null;
select count(*) into ld_rec_count_o
from tempo.agency_interest_org_xref
where master_ai_id = a_ai_id
  and int_doc_id = 0
  and relationship_code='fu'
  and end_date is null;
if ld_rec_count_p = 0 and ld_rec_count_o = 0 then
  return 'UNKNOWN';
elsif ld_rec_count_p = 1 and ld_rec_count_o = 0 then
  select master_person_id into ld_master_person_id
  from tempo.agency_interest_person_xref
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='zz'
    and end_date is null;
  select t1.master_person_first_name||' '|| t1.master_person_last_name
  into ls_return
  from tempo.person t1
  where t1.master_person_id = ld_master_person_id
  and t1.int_doc_id = 0;
  return ls_return;
elsif ld_rec_count_p = 0 and ld_rec_count_o = 1 then
  select master_org_id into ld_master_org_id
  from tempo.agency_interest_org_xref
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='fu'
    and end_date is null;
  select t1.master_org_name
  into ls_return
  from tempo.organization t1
  where t1.master_org_id = ld_master_org_id
  and t1.int_doc_id = 0;
  return ls_return;
elsif ld_rec_count_p + ld_rec_count_o > 1 then
  return 'AMBIGUOUS';
end if;
EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_billing_party_3;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_NUM_PERMITS
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_NUM_PERMITS" 
 (a_ai_id in tempo.agency_interest.master_ai_id%type)
 return number is
-- ***********************************************************************
-- FUNCTION func_get_fod_num_permits
--
-- Description: get count of number of permits for the agency interest that
--         have a future expiration date (greater sysdate)
--         only count once if there is more than one permit of the same type with
--         a future expiration date
--
-- Parameters: ai_id
--
-- Returns:  number
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  12/21/04  Original Author
-- ***********************************************************************
ln_return  number;
ln_no_data_found number;

BEGIN
ln_return := 0;
ln_no_data_found := 0;
select count(*) into ln_return
from tempo.dsk_central_file t1
where t1.master_ai_id = a_ai_id and
--t1.doc_type_general_code = 'FRM'  and
--t1.activity_category_code = 'PER'  and
t1.activity_class_code = 'PRF' and
t1.program_code = '40'  and
t1.doc_type_specific_code = 'PERSET' and
t1.locked_flag = 'Y' and
trunc(t1.expiration_date) >= trunc(sysdate) and
t1.expiration_date =
    (select max (t2.expiration_date)
     from  dsk_central_file t2
     where t1.master_ai_id = t2.master_ai_id and
--    t2.doc_type_general_code = 'FRM' and
--    t2.activity_category_code = 'PER' and
    t2.activity_class_code = 'PRF' and
    t2.program_code = '40' and
    t2.doc_type_specific_code = 'PERSET' and
    t2.locked_flag = 'Y' and
    t1.activity_type_code = t2.activity_type_code);

return ln_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LN_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_num_permits;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_PERMIT_EXP
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_PERMIT_EXP" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_fod_permit_exp
--
-- Description: Gets the permit types and expiration date
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  11/08/2006  Original Author
-- ***********************************************************************
ls_return  varchar2(420);
ls_no_data_found varchar2(3);
ld_rec_count     number;
cursor permits  is
select
   rpad(t3.activity_type_label, 30, ' ') || to_char(t1.expiration_date, 'mm/dd/yyyy') as permit
from
   dsk_central_file t1,
   dskmtb_activity_type t3
 where t1.master_ai_id = a_ai_id and
--t1.doc_type_general_code = 'FRM'  and
--t1.activity_category_code = 'PER'  and
t1.activity_class_code = 'PRF' and
t1.program_code = '40'  and
t1.doc_type_specific_code = 'PERSET' and
t1.locked_flag = 'Y' and
trunc(t1.expiration_date) >= trunc(sysdate) and
t1.expiration_date =
    (select max (t2.expiration_date)
     from  dsk_central_file t2
     where t1.master_ai_id = t2.master_ai_id and
--    t2.doc_type_general_code = 'FRM' and
--    t2.activity_category_code = 'PER' and
    t2.activity_class_code = 'PRF' and
    t2.program_code = '40' and
    t2.doc_type_specific_code = 'PERSET' and
    t2.locked_flag = 'Y' and
    t1.activity_type_code = t2.activity_type_code)  and
  t1.activity_type_code = t3.activity_type_code and
  t1.activity_class_code = t3.activity_class_code and
  t1.program_code = t3.program_code and
  t1.activity_category_code = t3.activity_category_code
order by 1;

BEGIN
  ld_rec_count := 0;
  ls_return := '';
  for c_rec in permits
  loop
     if ld_rec_count = 0 then
       ls_return := c_rec.permit;
     else
       ls_return := ls_return || chr(13) || chr(10) || c_rec.permit;
     end if;
     ld_rec_count := ld_rec_count + 1;
  end loop;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_permit_exp;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_PER_CONTACT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_PER_CONTACT" 
 (a_ai_id in tempo.agency_interest.master_ai_id%type)
 return tempo.agency_interest_person_xref.master_person_id%type is
-- ***********************************************************************
-- FUNCTION func_get_fod_per_contact
--
-- Description: if there is only one food permit contact relationship at the
--    agency interest level return the master_person_id
--
-- Parameters: ai_id
--
-- Returns:  number
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  10/15/04  Original Author
--      Cathy Perrodin          10/25/06                removed count handle
--                                                        > 1 row in errors
-- ***********************************************************************
ln_return  tempo.agency_interest_person_xref.master_person_id%type;
ln_no_data_found number;
ln_master_person_id tempo.agency_interest_person_xref.master_person_id%type;

BEGIN
ln_return := '';

  select master_person_id into ln_return
  from tempo.agency_interest_person_xref
  where master_ai_id = a_ai_id
    and int_doc_id = 0
    and relationship_code='fx'
    and end_date is null;

return ln_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LN_NO_DATA_FOUND;
    --if the above SQL finds more than one row
    WHEN TOO_MANY_ROWS THEN RETURN LN_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_fod_per_contact;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FOD_RECENT_STAFF
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FOD_RECENT_STAFF" 
 (a_ai_id in tempo.dsk_central_file.master_ai_id%type)
 return tempo.compl_eval_hdr.lead_investigator_id%type is
 -- ***********************************************************************
 -- FUNCTION func_get_fod_recent_staff
 --
 -- Description:  This function returns the most recent Staff ID of an AI's inspection documents
 --
 -- Parameters: AI ID
 --
 -- Returns:   number
 --
 -- Modification History:
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  09/30/04  Original Author
 -- ***********************************************************************

 ln_return            tempo.compl_eval_hdr.lead_investigator_id%type;
 ln_no_data_found     number;
 ln_int_doc_id        tempo.dsk_central_file.int_doc_id%type;

BEGIN
 ln_return := '';
 select max(int_doc_id)
 into ln_int_doc_id
 from tempo.dsk_central_file
 where doc_type_general_code = 'FRM' and
     activity_category_code = 'COM' and
     activity_class_code = 'CMI' and
     program_code = '40' and
     locked_flag = 'Y'  and
     master_ai_id = a_ai_id;
if ln_int_doc_id is not null then
 select lead_investigator_id
 into ln_return
 from tempo.compl_eval_hdr
 where int_doc_id = ln_int_doc_id;
end if;

return ln_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find any records
    WHEN NO_DATA_FOUND THEN RETURN LN_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLCODE;
END func_get_fod_recent_staff;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_FRS_COUNTY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_FRS_COUNTY" 
(
 a_ai_id      in   tempo.subject_item.master_ai_id%type,
 a_type       in   varchar2
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_frs_county
--
-- Description: Gets the county code or name, the state FIPS code is concatenated to the
--                      county code
--
-- Parameters:     AI ID, type (constant CODE or NAME
--
-- Returns:  string
--
-- Modification History:
-- Programmer  Date   Description
-- -------------- --------  ----------------
-- Cathy Perrodin  05/23/05  Original Author
-- ***********************************************************************
ls_return  varchar2(35);
ls_no_data_found varchar2(3);
ls_parish_or_county_code tempo.subj_item_loc_gov_within.parish_or_county_code%type;

BEGIN
select min(parish_or_county_code)
  into ls_parish_or_county_code
from tempo.subj_item_loc_gov_within
where master_ai_id = a_ai_id
and int_doc_id = 0
and subject_item_category_code = 'AI'
and parish_or_county_code between '001' and '061';
if ls_parish_or_county_code is not null then
if a_type = 'CODE' then
  ls_return := ls_parish_or_county_code || '35';
elsif a_type = 'NAME' then
  select parish_or_county_desc
  into ls_return
  from tempo.mtb_parish_county
  where parish_or_county_code = ls_parish_or_county_code;
end if;
end if;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_frs_county;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_HW_EPA_ID
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_HW_EPA_ID" 
( an_master_ai_id in tempo.agency_interest_alt.master_ai_id%type,
  as_fiscal_year in tempo.as_credit.fiscal_year%type,
  as_activity_type_code in varchar2,
  as_type in varchar2)
 return varchar2 is
-- ***********************************************************************
--function ustb.func_get_hw_epa_id
--description: return epa id or facility name
--
--modification history:
--	programmer		date			description
--	--------------		--------		---------------------------
--	cathy perrodin         	10/13/2005		original script
-- ***********************************************************************
ls_no_data_found varchar2(7);
ls_epa_id        varchar2(20);
ls_facility_name varchar2(100);
begin
ls_no_data_found := 'Missing';
  if as_activity_type_code = 'SQG' and as_fiscal_year <= 2002 then
  select t1.alternate_ai_id,
    t1.alternate_ai_name
  into ls_epa_id,
    ls_facility_name
  from tempo.agency_interest_alt t1
   where t1.master_ai_id = an_master_ai_id
   and t1.int_doc_id = 0
   and t1.alternate_ai_type_code in (221,231)
   and t1.alternate_ai_id like 'NM%'
   and t1.alternate_record_sequence = 
        (select max(t2.alternate_record_sequence)
         from tempo.agency_interest_alt t2
         where t1.master_ai_id = t2.master_ai_id
         and t1.int_doc_id = t2.int_doc_id
         and t2.alternate_ai_type_code in (221,231)
	 and t2.alternate_ai_id like 'NM%');    
/*      
     mtb_ai_type	
     ai_type_code  ai_type_desc
       221         HZWM-Generator-SQG
       231         HZWM-TSD-SQG   
*/       
  elsif as_activity_type_code = 'LQG' and as_fiscal_year <= 2002 then
  select t1.alternate_ai_id,
    t1.alternate_ai_name
  into ls_epa_id,
    ls_facility_name
  from tempo.agency_interest_alt t1
   where t1.master_ai_id = an_master_ai_id
   and t1.int_doc_id = 0
   and t1.alternate_ai_type_code in (216,230)
   and t1.alternate_ai_id like 'NM%'
   and t1.alternate_record_sequence = 
        (select max(t2.alternate_record_sequence)
         from tempo.agency_interest_alt t2
         where t1.master_ai_id = t2.master_ai_id
         and t1.int_doc_id = t2.int_doc_id
         and t2.alternate_ai_type_code in (216,230)
	 and t2.alternate_ai_id like 'NM%');    
/*
     mtb_ai_type	
     ai_type_code	ai_type_desc
       216 		HZWM-Generator-LQG 
       230 		HZWM-TSD-LQG 
*/ 
else
  select t1.alternate_ai_id,
    t1.alternate_ai_name
 into ls_epa_id,
   ls_facility_name
 from tempo.agency_interest_alt t1
 where t1.master_ai_id = an_master_ai_id
 and t1.int_doc_id = 0
 and t1.user_group_id in ('030','031','034','EPA')
 /*
      mtb_user_group
      user_group_id    user_group_desc 
       030            HWB
       031            HWB -Permit Management
       034            HWB- Handler     
       EPA            EPA ID
 */      
 and t1.alternate_ai_id like 'NM%'
 and t1.alternate_record_sequence = 
        (select max(t2.alternate_record_sequence)
         from tempo.agency_interest_alt t2
         where t1.master_ai_id = t2.master_ai_id
         and t1.int_doc_id = t2.int_doc_id
         and t2.user_group_id in ('030','031','034', 'EPA')
	 and t2.alternate_ai_id like 'NM%'); 
end if;
if ls_epa_id is null then
  ls_epa_id := 'Missing';
end if;
if ls_facility_name is null then
  ls_facility_name := 'Missing';
end if;  
if as_type = 'EPA' 
   then return ls_epa_id;
elsif as_type = 'NAME'
   then return ls_facility_name; 
else
   return 'Parameter error';
end if;
exception  -- exception handlers
    -- if the above sql doesn't find any records
    when no_data_found then return ls_no_data_found;
    -- errors
    when others then return sqlerrm;
end func_get_hw_epa_id;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_NMED_PSTB_REM_CONTACT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_NMED_PSTB_REM_CONTACT" (a_ai_id      in tempo.subject_item.master_ai_id%type,
                                                               a_int_doc_id in tempo.subject_item.int_doc_id%type,
                                                               a_si_cat     in tempo.subject_item.subject_item_category_code%type,
                                                               a_si_id      in tempo.subject_item.subject_item_id%type)
  return varchar2 is
  -- ***********************************************************************
  -- FUNCTION func_get_nmed_pstb_rem_contact
  --
  -- Description: if there is only one remediation contact relationship at the
  --    agency interest level return the name, if more than one then look at
  --         the subject item related entity data for the correct relationship
  --         return UNKNOWN if no relationships exist
  --         return AMBIGUOUS if more than one exists
  --
  -- Parameters: ai_id, int_doc_id, subject_item_category_code, subject_item_id
  --
  -- Returns:  string
  --
  -- Modification History:
  -- Programmer  Date   Description
  -- --------------         --------  ----------------
  -- Cathy Perrodin  07/22/04  Original Author
  -- ***********************************************************************
  ls_return           varchar2(210);
  ls_no_data_found    varchar2(8);
  ld_rec_count        number;
  ld_master_person_id tempo.agency_interest_person_xref.master_person_id%type;

BEGIN
  ls_no_data_found := 'UNKNOWN';
  --get count of remediation contact relationships
  select count(*)
    into ld_rec_count
    from tempo.agency_interest_person_xref
   where master_ai_id = a_ai_id
     and int_doc_id = a_int_doc_id
     and relationship_code = 'fy'
     and end_date is null;
  if ld_rec_count = 0 then
    return 'UNKNOWN';
  elsif ld_rec_count = 1 then
    select master_person_id
      into ld_master_person_id
      from tempo.agency_interest_person_xref
     where master_ai_id = a_ai_id
       and int_doc_id = a_int_doc_id
       and relationship_code = 'fy'
       and end_date is null;
    select master_person_first_name || ' ' || master_person_last_name
      into ls_return
      from tempo.person
     where master_person_id = ld_master_person_id
       and int_doc_id = a_int_doc_id;
    return ls_return;
  elsif ld_rec_count > 1 then
    select count(*)
      into ld_rec_count
      from tempo.subj_item_related_entity
     where master_ai_id = a_ai_id
       and int_doc_id = a_int_doc_id
       and subject_item_category_code = a_si_cat
       and subject_item_id = a_si_id
       and relationship_code = 'fy'
       and rel_end_date is null;
    if ld_rec_count = 0 then
      return 'AMBIGUOUS';
    elsif ld_rec_count = 1 then
      select rel_master_person_id
        into ld_master_person_id
        from tempo.subj_item_related_entity
       where master_ai_id = a_ai_id
         and int_doc_id = a_int_doc_id
         and subject_item_category_code = a_si_cat
         and subject_item_id = a_si_id
         and relationship_code = 'fy'
         and rel_end_date is null;
      select master_person_first_name || ' ' || master_person_last_name
        into ls_return
        from tempo.person
       where master_person_id = ld_master_person_id
         and int_doc_id = a_int_doc_id;
      return ls_return;
    elsif ld_rec_count > 1 then
      return 'AMBIGUOUS';
    end if;
  end if;
EXCEPTION
  -- exception handlers
  -- if the above SQL doesn't find ANY records
  WHEN NO_DATA_FOUND THEN
    RETURN LS_NO_DATA_FOUND;
    -- errors
  WHEN OTHERS THEN
    RETURN SQLERRM;
END func_get_nmed_pstb_rem_contact;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_PSTB_FAC_RESP_PARTY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_PSTB_FAC_RESP_PARTY" 
(
 a_ai_id      in   tempo.subject_item.master_ai_id%type,
 a_int_doc_id in   tempo.subject_item.int_doc_id%type,
 a_si_cat     in   tempo.subject_item.subject_item_category_code%type,
 a_si_id      in   tempo.subject_item.subject_item_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_pstb_fac_resp_party
--
-- Description: return all responsible party relationships found
--         return UNKNOWN if no relationships exist
--
-- Parameters: ai_id, int_doc_id, subject_item_category_code, subject_item_id
--
-- Returns:  string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  10/26/2006  Original Author
-- ***********************************************************************
ls_return  varchar2(210);
ls_no_data_found varchar2(8);
ld_rec_count       number;

cursor rp1 is
select master_person_first_name||' '||master_person_last_name rp
from tempo.agency_interest_person_xref t1,
tempo.person t2
where t1.master_ai_id = a_ai_id
  and t1.int_doc_id = a_int_doc_id
  and t1.relationship_code='gd'
  and t1.end_date is null
  and t1.master_person_id = t2.master_person_id
  and t1.int_doc_id = t2.int_doc_id
union
select master_org_name
from tempo.agency_interest_org_xref t3,
tempo.organization t4
where t3.master_ai_id = a_ai_id
  and t3.int_doc_id = a_int_doc_id
  and t3.relationship_code='ge'
  and t3.end_date is null
  and t3.master_org_id = t4.master_org_id
  and t3.int_doc_id = t4.int_doc_id
order by 1;
cursor rp2 is
select master_person_first_name||' '||master_person_last_name rp
from tempo.subj_item_related_entity t1,
tempo.person t2
where t1.master_ai_id = a_ai_id
  and t1.int_doc_id = a_int_doc_id
  and t1.subject_item_category_code = a_si_cat
  and t1.subject_item_id = a_si_id
  and t1.relationship_code='gd'
  and t1.rel_end_date is null
  and t1.rel_master_person_id = t2.master_person_id
  and t1.int_doc_id = t2.int_doc_id
union
select master_org_name
from tempo.subj_item_related_entity t3,
tempo.organization t4
where t3.master_ai_id = a_ai_id
  and t3.int_doc_id = a_int_doc_id
  and t3.subject_item_category_code = a_si_cat
  and t3.subject_item_id = a_si_id
  and t3.relationship_code='ge'
  and t3.rel_end_date is null
  and t3.rel_master_org_id = t4.master_org_id
  and t3.int_doc_id = t4.int_doc_id
order by 1;

 BEGIN
   ld_rec_count := 0;
   ls_no_data_found := 'Unknown';
   ls_return := 'Unknown';
   for c_rec in rp2
   loop
      if ld_rec_count = 0 then
        ls_return := c_rec.rp;
      else
        ls_return := ls_return || ',' || c_rec.rp;
      end if;
      ld_rec_count := ld_rec_count + 1;
   end loop;
   if ld_rec_count > 0 then
     return ls_return;
   end if;
   for c_rec in rp1
   loop
      if ld_rec_count = 0 then
        ls_return := c_rec.rp;
      else
        ls_return := ls_return || ',' || c_rec.rp;
      end if;
      ld_rec_count := ld_rec_count + 1;
   end loop;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_pstb_fac_resp_party;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_PSTB_REM_CONTACT_USER
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_PSTB_REM_CONTACT_USER" 
(
 a_ai_id      in   tempo.subject_item.master_ai_id%type,
 a_int_doc_id in   tempo.subject_item.int_doc_id%type,
 a_si_cat     in   tempo.subject_item.subject_item_category_code%type,
 a_si_id      in   tempo.subject_item.subject_item_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_pstb_rem_contact_user
--
-- Description: if there is only one remediation contact relationship at the
--    agency interest level return the associated userid, if more than one then look at
--         the subject item related entity data for the correct relationship
--         return NULL if no relationships exist
--         return NULL if more than one exists
--
-- Parameters: ai_id, int_doc_id, subject_item_category_code, subject_item_id
--
-- Returns:  string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  11/04/04  Original Author
-- ***********************************************************************
ls_return  tempo.dsk_user.user_id%type;
ls_no_data_found varchar2(10);
ld_rec_count     number;
ld_master_person_id tempo.agency_interest_person_xref.master_person_id%type;

BEGIN
ls_no_data_found := null;
--get count of remediation contact relationships
select count(*) into ld_rec_count
from tempo.agency_interest_person_xref
where master_ai_id = a_ai_id
  and int_doc_id = a_int_doc_id
  and relationship_code='fy'
  and end_date is null;
if ld_rec_count = 0 then
  return null;
elsif ld_rec_count = 1 then
  select master_person_id into ld_master_person_id
  from tempo.agency_interest_person_xref
  where master_ai_id = a_ai_id
    and int_doc_id = a_int_doc_id
    and relationship_code='fy'
    and end_date is null;
  select user_id into ls_return
  from tempo.dsk_user
  where master_person_id = ld_master_person_id
  and int_doc_id = 0
  and nvl(inactive_flag, 'N') <> 'Y';
  return ls_return;
elsif ld_rec_count > 1 then
  select count(*) into ld_rec_count
  from tempo.subj_item_related_entity
  where master_ai_id = a_ai_id
  and int_doc_id = a_int_doc_id
  and subject_item_category_code = a_si_cat
  and subject_item_id = a_si_id
  and relationship_code = 'fy'
  and rel_end_date is null;
  if ld_rec_count = 0 then
    return null;
  elsif ld_rec_count = 1 then
    select rel_master_person_id into ld_master_person_id
    from tempo.subj_item_related_entity
      where master_ai_id = a_ai_id
      and int_doc_id = a_int_doc_id
      and subject_item_category_code = a_si_cat
      and subject_item_id = a_si_id
      and relationship_code = 'fy'
      and rel_end_date is null;
    select user_id into ls_return
      from tempo.dsk_user
      where master_person_id = ld_master_person_id
      and int_doc_id = 0
      and nvl(inactive_flag, 'N') <> 'Y';
    return ls_return;
  elsif ld_rec_count > 1 then
    return null;
  end if;
end if;
EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_pstb_rem_contact_user;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_RELEASE_INCIDENT_DATE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_RELEASE_INCIDENT_DATE" 
(
 a_ai_id      in   tempo.subject_item.master_ai_id%type,
 a_int_doc_id in   tempo.subject_item.int_doc_id%type,
 a_si_cat     in   tempo.subject_item.subject_item_category_code%type,
 a_si_id      in   tempo.subject_item.subject_item_id%type
)
 return date is
-- ***********************************************************************
-- FUNCTION func_get_release_incident_date
--
-- Description: return the most recent incident date for a release
--
-- Parameters: ai_id, int_doc_id, subject_item_category_code, subject_item_id
--
-- Returns:  date
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  09/07/04  Original Author
-- ***********************************************************************
ls_return  date;
ls_no_data_found date;

BEGIN
ls_no_data_found := null;
select max(attribute_date) into ls_return
from tempo.subj_item_attribute
where master_ai_id = a_ai_id
  and int_doc_id = a_int_doc_id
  and subject_item_category_code = a_si_cat
  and subject_item_id = a_si_id
  and attribute_code = 'F09'
  and sub_attribute_code = 'C07';
return ls_return;
EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_release_incident_date;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_SI_COUNTY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_SI_COUNTY" 
(a_si_cat     in   tempo.subject_item.subject_item_category_code%type,
 a_si_id      in   tempo.subject_item.subject_item_id%type,
 a_int_doc_id in   tempo.subject_item.int_doc_id%type,
 a_ai_id      in   tempo.subject_item.master_ai_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION Func_Get_SI_County
--
-- Description: Gets the SI County(s) for the group that the
--        SI belongs to
--
-- Parameters: SI Type, ID, Document ID, AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- -------------- --------  ----------------
-- Cathy Perrodin  06/22/04  Original Author
--      Cathy Perrodin  07/09/04 Move from tempo schema to ustb
-- ***********************************************************************
ls_return  varchar2(420);
ls_no_data_found varchar2(3);
ld_group_id      tempo.subj_item_group_members.group_id%type;
ls_group_cat     tempo.subj_item_group_members.group_category_code%type;
ld_rec_count     number;
cursor county (p_ai_id number, p_int_doc_id number, p_group_cat varchar2, p_group_id number) is
  select t2.parish_or_county_desc
  from tempo.subj_item_loc_gov_within t1,
       tempo.mtb_parish_county t2
  where t1.master_ai_id = p_ai_id
  and t1.int_doc_id = p_int_doc_id
  and t1.subject_item_category_code = p_group_cat
  and t1.subject_item_id = p_group_id
  and t1.parish_or_county_code = t2.parish_or_county_code
  order by t2.parish_or_county_desc;

BEGIN
-- Get the group ID for the SI
select group_id,group_category_code
into ld_group_id,ls_group_cat
from tempo.subj_item_group_members
where member_category_code = a_si_cat and
   member_id = a_si_id and
   int_doc_id = a_int_doc_id and
   master_ai_id = a_ai_id;

if ld_group_id is not null then
  ld_rec_count := 0;
  for c_rec in county (a_ai_id, a_int_doc_id, ls_group_cat, ld_group_id)
  loop
     if ld_rec_count = 0 then
       ls_return := c_rec.parish_or_county_desc;
     else
       ls_return := ls_return || chr(13) || chr(10) || c_rec.parish_or_county_desc;
     end if;
     ld_rec_count := ld_rec_count + 1;
  end loop;
else
   ls_return := '';
end if;
return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_si_county;

/

--------------------------------------------------------
--  DDL for Function FUNC_GET_TRIBALLAND
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_GET_TRIBALLAND" 
(
 a_ai_id      in   tempo.subject_item.master_ai_id%type
)
 return varchar2 is
-- ***********************************************************************
-- FUNCTION func_get_triballand
--
-- Description: get native land flag from subj_item_loc_cultural or subj_item_location
--                 migrated data is in subj_item_location, data entered through tempo
--                      front end is in subj_item_loc_cultural
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  05/18/05  Original Author
-- ***********************************************************************
ls_return  tempo.subj_item_loc_cultural.on_nal_flag%type;
ls_no_data_found char(1);

begin
  ls_return := null;
  ls_no_data_found := 'N';
 for ai_record in
  (select nvl(on_nal_flag, 'N') tribal
   from tempo.subj_item_loc_cultural
   where
   master_ai_id = a_ai_id
   and int_doc_id = 0
   and subject_item_category_code = 'AI')
 loop
   ls_return := ai_record.tribal;
 end loop;

if ls_return is null then
select nvl(native_land_flag, 'N')
into ls_return
from tempo.subj_item_location
where
master_ai_id = a_ai_id
and int_doc_id = 0
and subject_item_category_code = 'AI';
end if;
return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_get_triballand;

/

--------------------------------------------------------
--  DDL for Function FUNC_ISNUMERIC
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_ISNUMERIC" 
  (p_charval in varchar2)
  return varchar2
is
  l_num_number number;
begin
  l_num_number := p_charval;
  return 'TRUE';
 exception when others then
  return 'FALSE';
--if the input is null TRUE is returned
 end func_isnumeric;

/

--------------------------------------------------------
--  DDL for Function FUNC_IS_FOD_ACTIVE_FACILITY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_IS_FOD_ACTIVE_FACILITY" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return char is
-- ***********************************************************************
-- FUNCTION func_is_fod_active_facility
--
-- Description: Determine if the facility is active
--                      Check for end date for the AI and also check alt historic food types
--                      The AI is inactive if there is an end date for the AI or if all
--                       food alt historic rows have end dates
--                      If no alt historic food rows exist consider active if the AI end date
--                       was not null
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  12/22/04  Original Author
-- ***********************************************************************
ls_return  char(1);
ls_no_data_found char(1);
ln_count number;
BEGIN
  ls_no_data_found := 'N';
  ls_return := 'N';
  select nvl2(end_date, 'N', 'Y')
  into ls_return
  from tempo.agency_interest
  where master_ai_id = a_ai_id
  and int_doc_id = 0;
-- AI end date is null so check alt historic food types
  if ls_return = 'Y' then
    select count(*)
    into ln_count
    from tempo.agency_interest_alt t1,
    tempo.mtb_ai_type t2
    where t1.master_ai_id = a_ai_id
    and t1.int_doc_id = 0
    and t1.end_date is null
    and t1.alternate_ai_type_code = t2.ai_type_code
    and upper(t2.ai_type_description) like 'FOOD%';
    -- count will be 0 if alt historic rows had end dates or there were no food alt historic rows
    -- if none the facility will be considered active so see if that was the case
    if ln_count = 0 then
      select count(*) into ln_count
      from tempo.agency_interest_alt t1,
      tempo.mtb_ai_type t2
      where t1.master_ai_id = a_ai_id
      and t1.int_doc_id = 0
      and t1.end_date is not null
      and t1.alternate_ai_type_code = t2.ai_type_code
      and upper(t2.ai_type_description) like 'FOOD%';
      if ln_count > 0 then
        ls_return := 'N';
      end if;
    end if;
  end if;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_is_fod_active_facility;

/

--------------------------------------------------------
--  DDL for Function FUNC_IS_FOD_ACTIVE_NOT_TEMP
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_IS_FOD_ACTIVE_NOT_TEMP" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return char is
-- ***********************************************************************
-- FUNCTION ustb.func_is_fod_active_not_temp
--
-- Description: Determine if the facility is active and not temporary
--                      Check for end date for the AI and also check alt historic food types
--                      The AI is inactive if there is an end date for the AI or if all
--                       food alt historic rows have end dates
--                      If no alt historic food rows exist consider active if the AI end date
--                       was not null
--                      If there is a temporary alt historic type and no other food alt
--                       historic rows consider inactive
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  10/26/06  Original Author
-- ***********************************************************************
ls_return  char(1);
ls_no_data_found char(1);
ln_count number;
ln_count_food_alt number;
ln_count_food_alt_temp number;
BEGIN
  ls_no_data_found := 'N';
  ls_return := 'N';
  select nvl2(end_date, 'N', 'Y')
  into ls_return
  from tempo.agency_interest
  where master_ai_id = a_ai_id
  and int_doc_id = 0;
-- AI end date is null so check alt historic food types
  if ls_return = 'Y' then
    select count(*)
    into ln_count_food_alt
    from tempo.agency_interest_alt t1,
    tempo.mtb_ai_type t2
    where t1.master_ai_id = a_ai_id
    and t1.int_doc_id = 0
    and t1.end_date is null
    and t1.alternate_ai_type_code <> '096'
    and t1.alternate_ai_type_code = t2.ai_type_code
    and upper(t2.ai_type_description) like 'FOOD%';
    select count(*)
    into ln_count_food_alt_temp
    from tempo.agency_interest_alt t1
    where t1.master_ai_id = a_ai_id
    and t1.int_doc_id = 0
    and t1.end_date is null
    and t1.alternate_ai_type_code = '096';
-- if temporary and no other types then consider inactive
   if ln_count_food_alt = 0 and ln_count_food_alt_temp > 0 then
     ls_return := 'N';
    -- count will be 0 if alt historic rows had end dates or there were no food alt historic rows
    -- if none the facility will be considered active so see if that was the case
    elsif ln_count_food_alt = 0 and ln_count_food_alt_temp = 0 then
      select count(*) into ln_count
      from tempo.agency_interest_alt t1,
      tempo.mtb_ai_type t2
      where t1.master_ai_id = a_ai_id
      and t1.int_doc_id = 0
      and t1.end_date is not null
      and t1.alternate_ai_type_code = t2.ai_type_code
      and upper(t2.ai_type_description) like 'FOOD%';
      if ln_count > 0 then
        ls_return := 'N';
      end if;
    end if;
  end if;

return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_is_fod_active_not_temp;

/

--------------------------------------------------------
--  DDL for Function FUNC_IS_FOD_TEMPORARY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."FUNC_IS_FOD_TEMPORARY" 
(
 a_ai_id      in   tempo.agency_interest_alt.master_ai_id%type
)
 return char is
-- ***********************************************************************
-- FUNCTION func_is_fod_temporary
--
-- Description: Determine if the facility is temporary
--
-- Parameters:  AI ID
--
-- Returns:   string
--
-- Modification History:
-- Programmer  Date   Description
-- --------------         --------  ----------------
-- Cathy Perrodin  11/19/04  Original Author
-- ***********************************************************************
ls_return  char(1);
ls_no_data_found char(1);

BEGIN
  ls_no_data_found := 'N';
  ls_return := 'N';
  select 'Y'
  into ls_return
  from tempo.agency_interest_alt t1
  where t1.master_ai_id = a_ai_id
  and t1.int_doc_id = 0
  and t1.alternate_ai_type_code = '096'
  and t1.end_date is null
  and not exists
  (select 'x'
   from tempo.agency_interest_alt t2,
   tempo.mtb_ai_type t3
   where t1.master_ai_id = t2.master_ai_id
   and t1.int_doc_id = t2.int_doc_id
   and t2.alternate_ai_type_code <> '096'
   and t2.end_date is null
   and t2.alternate_ai_type_code = t3.ai_type_code
   and upper(t3.ai_type_description) like 'FOOD%');
return ls_return;

EXCEPTION  -- exception handlers
    -- if the above SQL doesn't find ANY records
    WHEN NO_DATA_FOUND THEN RETURN LS_NO_DATA_FOUND;
    -- errors
    WHEN OTHERS THEN RETURN SQLERRM;
END func_is_fod_temporary;

/

--------------------------------------------------------
--  DDL for Function ONESTOP_NEXT_DATE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "USTB"."ONESTOP_NEXT_DATE" (p_date in date)
return date
is
l_day char(1);
l_hour char(2);
l_next_date date;
begin
l_day := substr(to_char(p_date, 'DY'), 1, 1);
l_hour := to_char(p_date, 'HH24');
if l_day = 'S' then
  l_next_date := trunc(next_day(p_date, 'MON'))+10/24;
elsif l_hour < '10' then
  l_next_date := trunc(p_date)+10/24;
elsif l_hour < '14' then
  l_next_date := trunc(p_date)+14/24;
elsif l_hour < '18' then
  l_next_date := trunc(p_date)+18/24;
elsif l_day = 'F' then
  l_next_date := trunc(next_day(p_date, 'MON'))+10/24;
else
  l_next_date := trunc(p_date+1)+10/24;
end if;
return l_next_date;
end onestop_next_date;

/

--------------------------------------------------------
--  DDL for Package FOD_PK_INSPECTIONS_DUE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "USTB"."FOD_PK_INSPECTIONS_DUE" is

 type inspections_due is record (
 master_ai_name varchar2(100),
 master_ai_id number(10),
 region_desc varchar2(100),
 district varchar2(3),
 field_office_desc varchar2(20),
 field_office varchar2(3),
 physical_address_line_1 varchar2(100),
 physical_address_line_2 varchar2(100),
 physical_address_line_3 varchar2(100),
 physical_address_muni_code varchar2(100),
 physical_address_state_code char(2),
 physical_address_zip varchar2(9),
 inspector number(10),
 inspector_first_name varchar2(100),
 inspector_last_name varchar2(100),
 last_inspected date,
 next_due date,
 days number(10),
 permits number(10),
 environmentalist number(10),
 env_first_name varchar2(100),
 envlast_name varchar2(100),
 facility_type varchar2(420));

 type result_set is ref cursor return inspections_due;
end fod_pk_inspections_due;

/

--------------------------------------------------------
--  DDL for Package FRS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "USTB"."FRS" 
as
   procedure main;
   procedure load_bk_tables;
   procedure load_tmp_tables;
   procedure find_deletes;
   procedure find_adds_updates;
   procedure load_adds_updates;
   procedure write_log (
      p_pkg_proc               in       varchar2,
      p_description            in       varchar2);
end;

/

--------------------------------------------------------
--  DDL for Package ONESTOP_DATA_REFRESH
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "USTB"."ONESTOP_DATA_REFRESH" 
AS
   PROCEDURE main;
   PROCEDURE write_log (
      p_pkg_proc               IN       VARCHAR2,
      p_description            IN       VARCHAR2);
END;

/

--------------------------------------------------------
--  DDL for Package PSTB_PK_RELEASES
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "USTB"."PSTB_PK_RELEASES" is
 type result_set is ref cursor return ustb.onestop_lust_releases1%rowtype;
end pstb_pk_releases;

/

--------------------------------------------------------
--  DDL for Package Body FRS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "USTB"."FRS" 
as
/*------------------------------------------------------------------------------------------------
   Created    Modified    By               Modification
        Cathy Perodin
    Modified By:  Melodie Rice 4/26/2010
    Changed the tables to reflect on Windsor's new Node design.

 DEPENDENCIES:
 Tables:   USTB 
 Packages: 
 Scripts:  DBNS job that runs everynight and updates all of the tables.
 
 DESCRIPTION OF PACKAGE:
 This package is designed to ultimately insert changed facility records into the USTB FRS tables.
 The process is as follows:
 1.  Main:  Sets variables and runs each procedure.
 2.  Load_bk_tables:  
     a.  Deletes all of the bk tables first
     b.  Inserts data back into the bk tables from the main frs tables.
     c.  Writes log entries describing how many entries were inserted.
     d.  NOTE:  bk tables won't get populated if there is nothing in the main frs tables THE FIRST TIME AROUND
 3.  Load_tmp_tables
     a.  First truncates the frs_tmp tables, then
         inserts information back into the frs_tmp tables from select queries from tempo and 
         ustb schemas.
 4.  Find_deletes 
     Find_deletes procedure inserts info into the frs_deletedfacilities table
     based on the MINUS query which returns all rows in the first query that 
     are not returned in the second query. 
-------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------*/
-- global functions
  /*-----------------------------------------------------------------------------------------------*/

  /*-----------------------------------------------------------------------------------------------*/
l_errorcode 	     number;
l_errormsg	     varchar2(240);
l_description	     varchar2(240);
l_pkg_proc           varchar2(30) := 'ustb.frs';
l_lastreporteddate   varchar2(10);

/*-------------------------------------------------------------------------
  Main is the calling procedure for the other FRS procedures
*/-------------------------------------------------------------------------

procedure main
is
begin
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.main begin';
  write_log (l_pkg_proc, l_description);
  load_bk_tables;
  l_lastreporteddate := to_char(sysdate, 'yyyy-mm-dd');
  load_tmp_tables;
  find_deletes;
  find_adds_updates;
  load_adds_updates;
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.main gather stats';
  write_log (l_pkg_proc, l_description);
-- Commented out by Alex Herndon 11/01/2006
--  dbms_stats.gather_schema_stats(ownname=> 'USTB' , cascade=> TRUE);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.main end';
  write_log (l_pkg_proc, l_description);

end main;

/*-------------------------------------------------------------------------
  load_bk_tables prcedure first deletes all of the frs back tables
  then inserts back into the bk tables from select queries from the
  main frs tables.  The procedure also writes the number of items inserted
  to a log...by calling the write_log function.
*/-------------------------------------------------------------------------
procedure load_bk_tables
is
e_count number;
f_count number;
a_count number;
g_count number;
s_count number;
n_count number;
i_count number;
o_count number;
d_count number;
begin
  delete from ustb.frs_bk_environmentalinterest;
  delete from ustb.frs_bk_facilitysite;
  delete from ustb.frs_bk_geographiccoordinates;
  delete from ustb.frs_bk_siccode;
  delete from ustb.frs_bk_naicscode;
  delete from ustb.frs_bk_individual;
  delete from ustb.frs_bk_organization;
  delete from ustb.frs_bk_deletedfacilities;
  insert into ustb.frs_bk_environmentalinterest
    select * from ustb.frs_environmentalinterest;
  e_count := sql%rowcount;
  insert into ustb.frs_bk_facilitysite
    select * from ustb.frs_facilitysite;
  f_count := sql%rowcount;
  insert into ustb.frs_bk_geographiccoordinates
    select * from ustb.frs_geographiccoordinates;
  g_count := sql%rowcount;
  insert into ustb.frs_bk_siccode
    select * from ustb.frs_siccode;
  s_count := sql%rowcount;
  insert into ustb.frs_bk_naicscode
    select * from ustb.frs_naicscode;
  n_count := sql%rowcount;
  insert into ustb.frs_bk_individual
    select * from ustb.frs_individual;
  i_count := sql%rowcount;
  insert into ustb.frs_bk_organization
    select * from ustb.frs_organization;
  o_count := sql%rowcount;
  insert into ustb.frs_bk_deletedfacilities
    select * from ustb.frs_deletedfacilities;
  d_count := sql%rowcount;
  commit;

  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_environmentalinterest records inserted ' || to_char(e_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_facilitysite records inserted ' || to_char(f_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_geographiccoordinates records inserted ' || to_char(g_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_siccode records inserted ' || to_char(s_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_naicscode records inserted ' || to_char(n_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_individual records inserted ' || to_char(i_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_organization records inserted ' || to_char(o_count);
  write_log (l_pkg_proc, l_description);
l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_bk_deletedfacilities inserted ' || to_char(d_count);
  write_log (l_pkg_proc, l_description);

  exception
    when others then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.load_bk_tables error';
      write_log (l_pkg_proc, l_description);
end load_bk_tables;

/*-------------------------------------------------------------------------
  load_tmp_tables procedure first truncates the frs_tmp tables, then
  inserts information back into the from select queries from tempo and 
  ustb schemas.
*/-------------------------------------------------------------------------

procedure load_tmp_tables
is
e_count number;
f_count number;
a_count number;
g_count number;
s_count number;
n_count number;
i_count number;
o_count number;
begin
  execute immediate 'truncate table ustb.frs_tmp_environmentalinterest';
  execute immediate 'truncate table ustb.frs_tmp_facilitysite';
  execute immediate 'truncate table ustb.frs_tmp_geographiccoordinates';
  execute immediate 'truncate table ustb.frs_tmp_siccode';
  execute immediate 'truncate table ustb.frs_tmp_naicscode';
  execute immediate 'truncate table ustb.frs_tmp_individual';
  execute immediate 'truncate table ustb.frs_tmp_organization';
  
insert into ustb.frs_tmp_environmentalinterest
(informationsystemacronymname,
informationsystemidentifier,
environmentalinteresttypetext,
federalstateinterestindicator,
environmentalintereststartdate,
intereststartdatequalifiertext,
environmentalinterestenddate,
interestenddatequalifiertext,
statefacilityidentifier,
frsindicator,
dohindicator
)
select
t2.informationsystemacronymname,--informationsystemacronymname
trim(t1.alternate_ai_id), -- informationssystemidentifier
t2.environmentalinteresttypetext, --environmentalinteresttypetext
nvl(t2.federalstateinterestindicator,'S'), --federalstateinterestindicator
decode(t2.intereststartdatequalifiertext, null, null,
  to_char (t1.start_date, 'yyyy-mm-dd')),--environmentalintereststartdate
t2.intereststartdatequalifiertext, --intereststartdatequalifiertext
null,--environmentalinterestenddate
null,--interestenddatequalifiertext
to_char(t1.master_ai_id),--statefacilityidentifier
1,--frsindicator
0--dohindicator
from
  tempo.agency_interest_alt t1,
  ustb.epa_env_interest_map t2
where
t1.int_doc_id = 0
and t1.end_date is null
and t1.user_group_id = t2.user_group_id
union
select
'CERCLIS',
trim(t1.alternate_ai_id),
'SUPERFUND NPL',
'F',
null,
null,
null,
null,
to_char(t1.master_ai_id),
1, --'NM-TEMPO'
0 
from
  tempo.agency_interest_alt t1,
  tempo.subj_item_attribute t2
where
t1.int_doc_id = 0
and t1.end_date is null
and t1.user_group_id = '028'
and t1.master_ai_id = t2.master_ai_id
and t2.int_doc_id = 0
and t2.subject_item_category_code = 'AI'
and t2.attribute_code = 'A19'
and t2.attribute_desc_code = 'A79'
union
select
'CERCLIS',
trim(t1.alternate_ai_id),
'SUPERFUND',
'F',
null,
null,
null,
null,
to_char(t1.master_ai_id),
1, --'NM-TEMPO'
0 --
from
  tempo.agency_interest_alt t1
where
t1.int_doc_id = 0
and t1.end_date is null
and t1.user_group_id = '028'
and not exists
(select 'x'
 from tempo.subj_item_attribute t2
 where t1.master_ai_id = t2.master_ai_id
 and t2.int_doc_id = 0
 and t2.subject_item_category_code = 'AI'
 and t2.attribute_code = 'A19'
 and t2.attribute_desc_code = 'A79');
  e_count := sql%rowcount;

insert into ustb.frs_tmp_facilitysite
(facilityregistryidentifier,
facilitysitename,
facilitysitetypename,
federalfacilityindicator,
triballandindicator,
triballandname,
congressionaldistrictnumber,
legislativedistrictnumber,
huccode,
locationaddresstext,
supplementallocationtext,
localityname,
countystatefipscode,
countyname,
stateuspscode,
statename,
countryname,
locationzipcode,
locationdescriptiontext,
lastreporteddate,
statefacilitysystemacronymname,
statefacilityidentifier,
sourceofdata,
alternativename,
alternativenametypetext,
mailingaddresstext,
supplementaladdresstext,
mailingaddresscityname,
mailingaddressstateuspscode,
mailingaddressstatename,
mailingaddresscountryname,
mailingaddresszipcode
)
select
null, --facilityregistryidentifier
substr(trim(t1.master_ai_name),1,80), --facilitysitename
'Stationary', --facilitysitetypename
null, --federalfacilityindicator
ustb.func_get_triballand(t1.master_ai_id), --triballandindicator
null, --traballandname
null, --congressionaldistrictnumber
null, --legislativedistrictnumber
null, --huccode
substr(trim(t2.physical_address_line_1), 1, 50), --locationaddresstext
substr(trim(t2.physical_address_line_2) --supplementallocationtext
   || decode(t2.physical_address_line_3,
             null, null,
             ', ' || trim(t2.physical_address_line_3)), 1, 50),
substr(trim(t2.physical_address_municipality), 1, 60),--localityname
ustb.func_get_frs_county(t1.master_ai_id, 'CODE'), --countystateipsconde
ustb.func_get_frs_county(t1.master_ai_id, 'NAME'),--countyname
t2.physical_address_state_code,--stateupspscode
substr(t3.state_desc, 1, 35), --statename
'USA', --countryname
trim(t2.physical_address_zip),--locationzipcode
'NM-TEMPO',--locationdescriptiontext
to_char(sysdate, 'yyyy-mm-dd'),--l_lastreporteddate, --lastreporteddate
'NM-TEMPO',--statefacilitysystemacronymname
to_char(t1.master_ai_id),--statefacilityidentifier
null, --sourceofdata
null, --alternativename
null, --alternativenametypetext
substr(trim(t2.mailing_address_line_1), 1, 50), --mailingaddresstext
substr(trim(t2.mailing_address_line_2) --supplementaladdresstext
   || decode(t2.mailing_address_line_3,
             null, null,
             ', ' || trim(t2.mailing_address_line_3)), 1, 50),
substr(trim(t2.mailing_address_municipality), 1, 30),--mailingaddresscityname
t2.mailing_address_state_code,--mailingaddressstateuspscode
substr(t3.state_desc, 1, 35), --mailingaddressstatename
'United States', --mailingaddresscountryname
trim(t2.mailing_address_zip) --mailingaddresszipcode
from
  tempo.agency_interest t1,
  tempo.agency_interest_address t2,
  tempo.mtb_state t3
where
t1.int_doc_id = 0
and to_char(t1.master_ai_id) in 
(select statefacilityidentifier from ustb.frs_tmp_environmentalinterest)
and t1.master_ai_id = t2.master_ai_id(+)
and t1.int_doc_id = t2.int_doc_id(+)
and t2.physical_address_state_code = t3.state_code(+);
  f_count := sql%rowcount;


 insert into ustb.frs_tmp_geographiccoordinates
 (latitudemeasure,
  longitudemeasure,
  horizontalaccuracymeasure,
  horizontalcollectionmethodtext,
  horizontalreferencedatumname,
  sourcemapscalenumber,
  referencepointtext,
  datacollectiondate,
  geometrictypename,
  locationcommentstext,
  verticalcollectionmethodtext,
  verticalmeasure,
  verticalaccuracymeasure,
  verticalreferencedatumname,
  coordinatedatasourcename,
  subentityidentifier,
  subentitytypename,
  datasourcename,
  statefacilityidentifier)
select
 decode(t1.latitude_dec_degrees, null,
    to_char(round((t1.latitude_degrees+
    (t1.latitude_minutes/60)+
    (nvl(t1.latitude_seconds,0)/3600)), 6), '99.999999'),
    to_char(t1.latitude_dec_degrees, '99.999999')),--latitudemeasure
 decode(t1.longitude_dec_degrees, null,
    to_char(round((t1.longitude_degrees+
    (t1.longitude_minutes/60)*sign(t1.longitude_degrees)+
    (nvl(t1.longitude_seconds,0)/3600)*sign(t1.longitude_degrees)), 6), '999.99999'),
    to_char(t1.longitude_dec_degrees, '999.99999')), --longitudemeasure
 null,--horizontalaccuracymeasure
 t2.horizontalcollectionmethodtext,--horizontalcollectionmethodtext
 t3.horizontalreferencedatumname,--horizontalreferencedatumname
 null,--sourcemapscalennumber
 substr(t4.referencepointtext, 1, 50), --referencepointtext
 to_char(t1.collected_date, 'yyyy-mm-dd'), --datacollectiondate
 null, --geometrictypename
 null,--locationcommentstext
 t8.verticalcollectionmethodtext,--verticalcollectionmethodtext
 decode(t7.height_or_depth_units_code,
   '45', trim(to_char(t7.height_or_depth_value, 'b9999.99')),
   '42', trim(to_char((t7.height_or_depth_value * 1000), 'b9999.99')),
   '34', trim(to_char((t7.height_or_depth_value * .3048), 'b9999.99')),
   null),--verticalmeasure
 null,--verticalaccuracymeasure
 null,--verticalreferencedatumname
 '035',--subentityidentifier
 null,--subentitytypename
 null,--datasourcename
'NM-TEMPO',--datasourcename
 to_char(t1.master_ai_id)--statefaclityidentifier
from
  tempo.subj_item_loc_lat_long t1,
  ustb.frs_ref_horizcolmethtxt t2,
  ustb.frs_ref_horizrefdat t3,
  ustb.frs_ref_refpointtxt t4,
  tempo.subj_item_location t7,
  ustb.frs_ref_vertcolmethtxt t8
where
t1.int_doc_id = 0
and t1.subject_item_category_code = 'AI'
and to_char(t1.master_ai_id) in
  (select statefacilityidentifier from ustb.frs_tmp_facilitysite)
and t1.lat_long_id =
  (select max(t2.lat_long_id)
   from tempo.subj_item_loc_lat_long t2
   where t1.master_ai_id = t2.master_ai_id
   and t1.int_doc_id = t2.int_doc_id
   and t1.subject_item_category_code = t2.subject_item_category_code)
and (t1.latitude_dec_degrees is not null or (t1.latitude_degrees is not null and
   t1.latitude_minutes is not null and t1.latitude_seconds is not null))
and (t1.longitude_dec_degrees is not null or (t1.longitude_degrees is not null and
   t1.longitude_minutes is not null and t1.longitude_seconds is not null))
and t1.method_code = t2.coordinate_system_code(+)
and t1.datum_code = t3.coordinate_org_code(+)
and t1.reference_point_code = t4.ref_point_code(+)
--and t1.geom_type_code = t5.geom_type_code(+)
and t1.master_ai_id = t7.master_ai_id(+)
and t1.int_doc_id = t7.int_doc_id(+)
and t1.subject_item_category_code = t7.subject_item_category_code(+)
and t1.subject_item_id = t7.subject_item_id(+)
and t7.z_coordinate_method_code = t8.z_coordinate_method_code(+);
  g_count := sql%rowcount;
update ustb.frs_tmp_geographiccoordinates
 set verticalmeasure = null where substr(verticalmeasure, 1, 1) = '#';

insert into ustb.frs_tmp_siccode
(
 siccode,
 sicprimaryindicator,
 statefacilityidentifier)
select distinct
t1.sic_code,
'UNKNOWN',
to_char(t1.master_ai_id)
from
  tempo.subj_item_sic t1
where
t1.int_doc_id = 0
and t1.subject_item_category_code = 'AI'
and to_char(t1.master_ai_id) in
  (select statefacilityidentifier from ustb.frs_tmp_facilitysite);
  s_count := sql%rowcount;

insert into ustb.frs_tmp_naicscode
(
 naicscode,
 naicsprimaryindicator,
 statefacilityidentifier)
select distinct
substr(trim(t1.naic_code) || '0000', 1, 6),
'UNKNOWN',
to_char(t1.master_ai_id)
from
  tempo.subj_item_naic t1
where
t1.int_doc_id = 0
and t1.subject_item_category_code = 'AI'
and to_char(t1.master_ai_id) in
  (select statefacilityidentifier from ustb.frs_tmp_facilitysite);
  n_count := sql%rowcount;

insert into ustb.frs_tmp_individual
(
 affiliationtypetext,
 affiliationstartdate,
 affiliationenddate,
 emailaddresstext,
 telephonenumber,
 phoneextension,
 faxnumber,
 alternatetelephonenumber,
 individualfullname,
 individualtitletext,
 mailingaddresstext,
 supplementaladdresstext,
 mailingaddresscityname,
 mailingaddressstateuspscode,
 mailingaddressstatename,
 mailingaddresscountryname,
 mailingaddresszipcode,
 statefacilityidentifier)
select distinct
decode(t1.relationship_code,
   'gd', 'Is the Facility''s PSTB Responsible Party',
   substr(t2.relationship_reverse_desc, 1, 40)),
to_char(t1.start_date, 'yyyy-mm-dd'),
to_char(t1.end_date, 'yyyy-mm-dd'),
trim(t6.address_or_phone),
substr(trim(t7.address_or_phone), 1, 30),
null,
substr(trim(t8.address_or_phone), 1, 30),
substr(trim(t9.address_or_phone), 1, 30),
trim(substr(trim(t4.master_person_first_name)
   || ' '
   || decode (t4.master_person_middle_initial,
              null, null,
              t4.master_person_middle_initial || ' ')
   || trim(t4.master_person_last_name), 1, 70)),
substr(t3.title_desc, 1, 40),
substr(trim(t5.mailing_address_line_1), 1, 50),
substr(trim(t5.mailing_address_line_2)
   || decode(t5.mailing_address_line_3,
             null, null,
             ', ' || trim(t5.mailing_address_line_3)), 1, 50),
substr(trim(t5.mailing_address_municipality), 1, 30),
t5.mailing_address_state_code,
substr(t10.state_desc, 1, 35),
'United States',
trim(t5.mailing_address_zip),
to_char(t1.master_ai_id)
from
tempo.agency_interest_person_xref t1,
tempo.mtb_relationship t2,
tempo.mtb_person_title t3,
tempo.person t4,
tempo.person_address t5,
tempo.person_telecom t6,
tempo.person_telecom t7,
tempo.person_telecom t8,
tempo.person_telecom t9,
tempo.mtb_state t10
where
t1.int_doc_id = 0
and t1.relationship_code in ('be','bh','gd')
and to_char(t1.master_ai_id) in
  (select statefacilityidentifier from ustb.frs_tmp_facilitysite)
and t1.end_date is null
and t1.relationship_code = t2.relationship_code
and t1.master_person_id = t4.master_person_id
and t1.int_doc_id = t4.int_doc_id
and t4.title_code = t3.title_code(+)
and t1.master_person_id = t6.master_person_id(+)
and t1.int_doc_id = t6.int_doc_id(+)
and t6.telecom_type_code(+) = 'EM'
and t1.master_person_id = t7.master_person_id(+)
and t1.int_doc_id = t7.int_doc_id(+)
and t7.telecom_type_code(+) = 'WP'
and t1.master_person_id = t8.master_person_id(+)
and t1.int_doc_id = t8.int_doc_id(+)
and t8.telecom_type_code(+) = 'WF'
and t1.master_person_id = t9.master_person_id(+)
and t1.int_doc_id = t9.int_doc_id(+)
and t9.telecom_type_code(+) = 'AW'
and t1.master_person_id = t5.master_person_id(+)
and t1.int_doc_id = t5.int_doc_id(+)
and t5.mailing_address_state_code = t10.state_code(+);
  i_count := sql%rowcount;

insert into ustb.frs_tmp_organization
(
 affiliationtypetext,
 affiliationstartdate,
 affiliationenddate,
 emailaddresstext,
 telephonenumber,
 phoneextension,
 faxnumber,
 alternatetelephonenumber,
 organizationformalname,
 organizationdunsnumber,
 organizationtypetext,
 employeridentifier,
 statebusinessidentifier,
 ultimateparentname,
 ultimateparentdunsnumber,
 mailingaddresstext,
 supplementaladdresstext,
 mailingaddresscityname,
 mailingaddressstateuspscode,
 mailingaddressstatename,
 mailingaddresscountryname,
 mailingaddresszipcode,
 statefacilityidentifier)
select distinct
decode(t1.relationship_code,
   'ge', 'Is the Facility''s PSTB Responsible Party',
   substr(t2.relationship_reverse_desc, 1, 40)),
to_char(t1.start_date, 'yyyy-mm-dd'),
to_char(t1.end_date, 'yyyy-mm-dd'),
trim(t6.address_or_phone),
substr(trim(t7.address_or_phone), 1, 30),
null,
substr(trim(t8.address_or_phone), 1, 30),
substr(trim(t9.address_or_phone), 1, 30),
substr(trim(t4.master_org_name), 1, 80),
null,
null,
null,
null,
null,
null,
substr(trim(t5.mailing_address_line_1), 1, 50),
substr(trim(t5.mailing_address_line_2)
   || decode(t5.mailing_address_line_3,
             null, null,
             ', ' || trim(t5.mailing_address_line_3)), 1, 50),
substr(trim(t5.mailing_address_municipality), 1, 30),
t5.mailing_address_state_code,
substr(t10.state_desc, 1, 35),
'United States',
trim(t5.mailing_address_zip),
to_char(t1.master_ai_id)
from
tempo.agency_interest_org_xref t1,
tempo.mtb_relationship t2,
tempo.organization t4,
tempo.organization_address t5,
tempo.organization_telecom t6,
tempo.organization_telecom t7,
tempo.organization_telecom t8,
tempo.organization_telecom t9,
tempo.mtb_state t10
where
t1.int_doc_id = 0
and t1.relationship_code in ('fa','ea','ge')
and to_char(t1.master_ai_id) in
  (select statefacilityidentifier from ustb.frs_tmp_facilitysite)
and t1.end_date is null
and t1.relationship_code = t2.relationship_code
and t1.master_org_id = t4.master_org_id
and t1.int_doc_id = t4.int_doc_id
and t1.master_org_id = t6.master_org_id(+)
and t1.int_doc_id = t6.int_doc_id(+)
and t6.telecom_type_code(+) = 'EM'
and t1.master_org_id = t7.master_org_id(+)
and t1.int_doc_id = t7.int_doc_id(+)
and t7.telecom_type_code(+) = 'WP'
and t1.master_org_id = t8.master_org_id(+)
and t1.int_doc_id = t8.int_doc_id(+)
and t8.telecom_type_code(+) = 'WF'
and t1.master_org_id = t9.master_org_id(+)
and t1.int_doc_id = t9.int_doc_id(+)
and t9.telecom_type_code(+) = 'AW'
and t1.master_org_id = t5.master_org_id(+)
and t1.int_doc_id = t5.int_doc_id(+)
and t5.mailing_address_state_code = t10.state_code(+);
  o_count := sql%rowcount;

  commit;

  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_environmentalinterest records inserted ' || to_char(e_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_facilitysite records inserted ' || to_char(f_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_geographiccoordinates records inserted ' || to_char(g_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_sic records inserted ' || to_char(s_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_naics records inserted ' || to_char(n_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_individual records inserted ' || to_char(i_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_tmp_organization records inserted ' || to_char(o_count);
  write_log (l_pkg_proc, l_description);

  exception
    when others then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.load_tmp_tables error';
      write_log (l_pkg_proc, l_description);
end load_tmp_tables;

/*-------------------------------------------------------------------------
  find_deletes procedure inserts info into the frs_deletedfacilities table
  based on the MINUS query which returns all rows in the first query that 
  are not returned in the second query. 
*/-------------------------------------------------------------------------
procedure find_deletes
is
d_count number;
begin
  insert into ustb.frs_deletedfacilities
  (
   statefacilityidentifier,
   deletedondate)
  select --t1.statefacilitysystemacronymname,
      t1.statefacilityidentifier,
      l_lastreporteddate
  from
  (select --statefacilitysystemacronymname,
   statefacilityidentifier
   from ustb.frs_facilitysite
   minus
   select --statefacilitysystemacronymname,
   statefacilityidentifier
   from ustb.frs_tmp_facilitysite) t1;
  d_count := sql%rowcount;
  delete from ustb.frs_environmentalinterest
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_facilitysite
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_geographiccoordinates
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_siccode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_naicscode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_individual
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  delete from ustb.frs_organization
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_deletedfacilities
     where deletedondate = l_lastreporteddate);
  commit;

  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_deletedfacilities records inserted ' || to_char(d_count);
  write_log (l_pkg_proc, l_description);

  exception
    when others then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.find_deletes error';
      write_log (l_pkg_proc, l_description);
end find_deletes;

/*-------------------------------------------------------------------------
  find_adds_updates
*/-------------------------------------------------------------------------
procedure find_adds_updates
is
begin
  delete from ustb.frs_tmp_changes;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  facilityregistryidentifier,
  facilitysitename,
  facilitysitetypename,
  federalfacilityindicator,
  triballandindicator,
  triballandname,
  congressionaldistrictnumber,
  legislativedistrictnumber,
  huccode,
  locationaddresstext,
  supplementallocationtext,
  localityname,
  countystatefipscode,
  countyname,
  stateuspscode,
  statename,
  countryname,
  locationzipcode,
  locationdescriptiontext,
  statefacilitysystemacronymname,
  statefacilityidentifier
  from ustb.frs_tmp_facilitysite
  minus
  select
  facilityregistryidentifier,
  facilitysitename,
  facilitysitetypename,
  federalfacilityindicator,
  triballandindicator,
  triballandname,
  congressionaldistrictnumber,
  legislativedistrictnumber,
  huccode,
  locationaddresstext,
  supplementallocationtext,
  localityname,
  countystatefipscode,
  countyname,
  stateuspscode,
  statename,
  countryname,
  locationzipcode,
  locationdescriptiontext,
  statefacilitysystemacronymname,
  statefacilityidentifier
  from ustb.frs_facilitysite) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  informationsystemacronymname,
  informationsystemidentifier,
  environmentalinteresttypetext,
  federalstateinterestindicator,
  environmentalintereststartdate,
  intereststartdatequalifiertext,
  environmentalinterestenddate,
  interestenddatequalifiertext,
  statefacilityidentifier
  from ustb.frs_tmp_environmentalinterest
  minus
  select
  informationsystemacronymname,
  informationsystemidentifier,
  environmentalinteresttypetext,
  federalstateinterestindicator,
  environmentalintereststartdate,
  intereststartdatequalifiertext,
  environmentalinterestenddate,
  interestenddatequalifiertext,
  statefacilityidentifier
  from ustb.frs_environmentalinterest) t1;

    insert into ustb.frs_tmp_changes
    (statefacilityidentifier)
    select t1.statefacilityidentifier
    from
    (select
    informationsystemacronymname,
    informationsystemidentifier,
    environmentalinteresttypetext,
    federalstateinterestindicator,
    environmentalintereststartdate,
    intereststartdatequalifiertext,
    environmentalinterestenddate,
    interestenddatequalifiertext,
    statefacilityidentifier
    from ustb.frs_environmentalinterest
    minus
    select
    informationsystemacronymname,
    informationsystemidentifier,
    environmentalinteresttypetext,
    federalstateinterestindicator,
    environmentalintereststartdate,
    intereststartdatequalifiertext,
    environmentalinterestenddate,
    interestenddatequalifiertext,
    statefacilityidentifier
  from ustb.frs_tmp_environmentalinterest) t1;


  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  latitudemeasure,
  longitudemeasure,
  horizontalaccuracymeasure,
  horizontalcollectionmethodtext,
  horizontalreferencedatumname,
  sourcemapscalenumber,
  referencepointtext,
  datacollectiondate,
  geometrictypename,
  locationcommentstext,
  verticalcollectionmethodtext,
  verticalmeasure,
  verticalaccuracymeasure,
  verticalreferencedatumname,
  coordinatedatasourcename,
  subentityidentifier,
  subentitytypename,
  statefacilityidentifier
  from ustb.frs_tmp_geographiccoordinates
  minus
  select
  latitudemeasure,
  longitudemeasure,
  horizontalaccuracymeasure,
  horizontalcollectionmethodtext,
  horizontalreferencedatumname,
  sourcemapscalenumber,
  referencepointtext,
  datacollectiondate,
  geometrictypename,
  locationcommentstext,
  verticalcollectionmethodtext,
  verticalmeasure,
  verticalaccuracymeasure,
  verticalreferencedatumname,
  coordinatedatasourcename,
  subentityidentifier,
  subentitytypename,
  statefacilityidentifier
  from ustb.frs_geographiccoordinates) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  latitudemeasure,
  longitudemeasure,
  horizontalaccuracymeasure,
  horizontalcollectionmethodtext,
  horizontalreferencedatumname,
  sourcemapscalenumber,
  referencepointtext,
  datacollectiondate,
  geometrictypename,
  locationcommentstext,
  verticalcollectionmethodtext,
  verticalmeasure,
  verticalaccuracymeasure,
  verticalreferencedatumname,
  coordinatedatasourcename,
  subentityidentifier,
  subentitytypename,
  datasourcename,
  statefacilityidentifier
  from ustb.frs_geographiccoordinates
  minus
  select
  latitudemeasure,
  longitudemeasure,
  horizontalaccuracymeasure,
  horizontalcollectionmethodtext,
  horizontalreferencedatumname,
  sourcemapscalenumber,
  referencepointtext,
  datacollectiondate,
  geometrictypename,
  locationcommentstext,
  verticalcollectionmethodtext,
  verticalmeasure,
  verticalaccuracymeasure,
  verticalreferencedatumname,
  coordinatedatasourcename,
  subentityidentifier,
  subentitytypename,
  datasourcename,
  statefacilityidentifier
  from ustb.frs_tmp_geographiccoordinates) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  siccode,
  sicprimaryindicator,
  statefacilityidentifier
  from ustb.frs_tmp_siccode
  minus
  select
  siccode,
  sicprimaryindicator,
  statefacilityidentifier
  from ustb.frs_siccode) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  siccode,
  sicprimaryindicator,
  statefacilityidentifier
  from ustb.frs_siccode
  minus
  select
  siccode,
  sicprimaryindicator,
  statefacilityidentifier
  from ustb.frs_tmp_siccode) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  naicscode,
  naicsprimaryindicator,
  statefacilityidentifier
  from ustb.frs_tmp_naicscode
  minus
  select
  naicscode,
  naicsprimaryindicator,
  statefacilityidentifier
  from ustb.frs_naicscode) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  naicscode,
  naicsprimaryindicator,
  statefacilityidentifier
  from ustb.frs_naicscode
  minus
  select
  naicscode,
  naicsprimaryindicator,
  statefacilityidentifier
  from ustb.frs_tmp_naicscode) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  individualfullname,
  individualtitletext,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_tmp_individual
  minus
  select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  individualfullname,
  individualtitletext,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_individual) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  individualfullname,
  individualtitletext,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_individual
  minus
  select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  individualfullname,
  individualtitletext,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_tmp_individual) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  organizationformalname,
  organizationdunsnumber,
  organizationtypetext,
  employeridentifier,
  statebusinessidentifier,
  ultimateparentname,
  ultimateparentdunsnumber,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_tmp_organization
  minus
  select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  organizationformalname,
  organizationdunsnumber,
  organizationtypetext,
  employeridentifier,
  statebusinessidentifier,
  ultimateparentname,
  ultimateparentdunsnumber,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_organization) t1;

  insert into ustb.frs_tmp_changes
  (statefacilityidentifier)
  select t1.statefacilityidentifier
  from
  (select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  organizationformalname,
  organizationdunsnumber,
  organizationtypetext,
  employeridentifier,
  statebusinessidentifier,
  ultimateparentname,
  ultimateparentdunsnumber,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_organization
  minus
  select
  affiliationtypetext,
  affiliationstartdate,
  affiliationenddate,
  emailaddresstext,
  telephonenumber,
  phoneextension,
  faxnumber,
  alternatetelephonenumber,
  organizationformalname,
  organizationdunsnumber,
  organizationtypetext,
  employeridentifier,
  statebusinessidentifier,
  ultimateparentname,
  ultimateparentdunsnumber,
  mailingaddresstext,
  supplementaladdresstext,
  mailingaddresscityname,
  mailingaddressstateuspscode,
  mailingaddressstatename,
  mailingaddresscountryname,
  mailingaddresszipcode,
  statefacilityidentifier
  from ustb.frs_tmp_organization) t1;

  commit;
  exception
    when others then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.find_adds_updates error';
      write_log (l_pkg_proc, l_description);
end find_adds_updates;

procedure load_adds_updates
is
e_count number;
f_count number;
a_count number;
g_count number;
s_count number;
n_count number;
i_count number;
o_count number;
begin

  delete from ustb.frs_environmentalinterest
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_environmentalinterest
    select * from ustb.frs_tmp_environmentalinterest
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  e_count := sql%rowcount;
  delete from ustb.frs_facilitysite
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_facilitysite
    select * from ustb.frs_tmp_facilitysite
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  f_count := sql%rowcount;
  delete from ustb.frs_geographiccoordinates
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_geographiccoordinates
    select * from ustb.frs_tmp_geographiccoordinates
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  g_count := sql%rowcount;
  delete from ustb.frs_siccode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_siccode
    select * from ustb.frs_tmp_siccode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  s_count := sql%rowcount;
  delete from ustb.frs_naicscode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_naicscode
    select * from ustb.frs_tmp_naicscode
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  n_count := sql%rowcount;
  delete from ustb.frs_individual
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_individual
    select * from ustb.frs_tmp_individual
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  i_count := sql%rowcount;
  delete from ustb.frs_organization
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  insert into ustb.frs_organization
    select * from ustb.frs_tmp_organization
    where statefacilityidentifier in
    (select statefacilityidentifier from ustb.frs_tmp_changes);
  o_count := sql%rowcount;
  commit;

  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_environmentalinterest records inserted ' || to_char(e_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_facilitysite records inserted ' || to_char(f_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_geographiccoordinates records inserted ' || to_char(g_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_sic records inserted ' || to_char(s_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_naics records inserted ' || to_char(n_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_individual records inserted ' || to_char(i_count);
  write_log (l_pkg_proc, l_description);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' frs_organization records inserted ' || to_char(o_count);
  write_log (l_pkg_proc, l_description);

  exception
    when others then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.frs.load_adds_updates error';
      write_log (l_pkg_proc, l_description);
end load_adds_updates;

procedure write_log (
  p_pkg_proc               in   varchar2,
  p_description            in   varchar2)
is
begin
   l_errorcode := sqlcode;
   l_errormsg  := substr(sqlerrm,1,240);
   if l_errorcode <> 0 then
     rollback;
   end if;
   insert into ustb.onestop_log_table (pkg_proc, code, message, description)
   values (p_pkg_proc, l_errorcode, l_errormsg, p_description);
   commit;
end write_log;
end;

/

--------------------------------------------------------
--  DDL for Package Body ONESTOP_DATA_REFRESH
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "USTB"."ONESTOP_DATA_REFRESH" 
AS
l_errorcode 	     number;
l_errormsg	     varchar2(240);
l_description	     varchar2(240);
l_pkg_proc           varchar2(30) := 'ustb.onestop_data_refresh';
PROCEDURE main
IS
BEGIN
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.onestop_data_refresh.main begin';
  write_log (l_pkg_proc, l_description);
  execute immediate 'truncate table ustb.onestop_lust_releases1';
 insert into ustb.onestop_lust_releases1
  select si1.subject_item_designation id,
         upper(substr(si1.subject_item_desc,1,50)) old_name,
         si.subject_item_designation facility_id,
         upper(ustb.func_get_nmed_pstb_rem_contact(si1.master_ai_id, si1.int_doc_id,
           si1.subject_item_category_code, si1.subject_item_id)) staff_name,
         upper(ustb.func_get_pstb_fac_resp_party(si1.master_ai_id, si1.int_doc_id,
           si1.subject_item_category_code, si1.subject_item_id)) responsible_party,
         si1.user_last_updt user_modified,
         si1.tmsp_last_updt date_modified
  from tempo.subject_item si, tempo.subj_item_group_members si_gm,
  tempo.subject_item si1
  where si.subject_item_category_code='GPTF'
   and si.subject_item_type_code = 'GPTK'
   and si.int_doc_id=0
   and ustb.func_isnumeric(si.subject_item_designation) = 'TRUE'
   and si_gm.group_id=si.subject_item_id
   and si_gm.group_category_code=si.subject_item_category_code
   and si_gm.int_doc_id=si.int_doc_id
   and si_gm.master_ai_id=si.master_ai_id
   and si_gm.member_category_code='ACT'
   and si1.subject_item_id=si_gm.member_id
   and si1.int_doc_id=si_gm.int_doc_id
   and si1.master_ai_id=si_gm.master_ai_id
   and si1.subject_item_category_code=si_gm.member_category_code
   and si1.subject_item_type_code = 'ACCR'
   and ustb.func_isnumeric(si1.subject_item_designation) = 'TRUE';

   l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_lust_releases1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);

  execute immediate 'truncate table ustb.onestop_lust_status1';
  insert into ustb.onestop_lust_status1
  select si3.subject_item_designation rel_id,
   decode(sia.attribute_desc_code,
   'L83', 'SWQB',
   'L84', 'I-RP',
   'L85', 'I-LT',
   'L86', 'I-SL',
   'L87', 'I-F',
   'L88', 'AC-LT',
   'L89', 'AC-SL',
   'L90', 'AC-RP',
   'L91', 'AC-F',
   'L92', 'C-LT',
   'L93', 'C-SL',
   'L94', 'C-RP',
   'L95', 'C-F',
   'L96', 'HWB',
   'L97', 'M-SL',
   'L98', 'M-SL',
   'L99', 'M-RP',
   'M00', 'M-F',
   'M01', 'GWQB',
   'M02', 'OCD',
   'M03', 'PI-C',
   'M04', 'EPA',
   'M05', 'NFA',
   'M22', 'NFA-S',
   'M23', 'PI-S',
    null) old_status_code,
   sia.attribute_desc_code status_code,
   mtb_ad.attribute_desc_desc status_desc,
   sia.attribute_date date_created,
   substr(sia.attribute_comments_desc,1,240) comments
   from tempo.subject_item si3,
   tempo.subj_item_attribute sia,
   tempo.mtb_attribute_desc mtb_ad
   where si3.subject_item_type_code='ACCR'
    and si3.subject_item_category_code='ACT'
    and si3.int_doc_id = 0
    and ustb.func_isnumeric(si3.subject_item_designation) = 'TRUE'
    and sia.master_ai_id=si3.master_ai_id
    and sia.int_doc_id=si3.int_doc_id
    and sia.subject_item_category_code=si3.subject_item_category_code
    and sia.subject_item_id=si3.subject_item_id
    and sia.attribute_code='F08'
    and sia.sub_attribute_code='A01'
    and sia.attribute_desc_code = mtb_ad.attribute_desc_code;
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_lust_status1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);

  execute immediate 'truncate table ustb.onestop_facilities1';
  insert into ustb.onestop_facilities1
  select si.subject_item_designation id,
         si.master_ai_id ai_id,
         upper(substr(si.subject_item_desc,1,50)) facility_name,
         upper(substr(sil.physical_address_line_1,1,50)) address1,
         upper(substr(sil.physical_address_line_2,1,50)) address2,
         upper(substr(sil.physical_address_municipality,1,50)) city,
         sil.physical_address_state_code state,
         sil.physical_address_zip zip,
         owner_id.owner_id,
         silc.on_nal_flag indian,
         si.user_last_updt user_modified,
         si.tmsp_last_updt date_modified
  from tempo.subject_item si, tempo.subj_item_location sil, tempo.subj_item_loc_cultural silc,
  (select distinct master_ai_id, int_doc_id, alternate_ai_name,
  to_number(trim(agency_interest_alt.alternate_ai_id)) owner_id
   from tempo.agency_interest_alt
   where agency_interest_alt.user_group_id='084'
   and ustb.func_isnumeric(agency_interest_alt.alternate_ai_id) = 'TRUE'
   and end_date is null) owner_id
  where si.subject_item_type_code='GPTK'
   and si.subject_item_category_code='GPTF'
   and si.int_doc_id = 0
   and ustb.func_isnumeric(si.subject_item_designation) = 'TRUE'
   and sil.subject_item_id(+)=si.subject_item_id
   and sil.subject_item_category_code(+)=si.subject_item_category_code
   and sil.int_doc_id(+)=si.int_doc_id
   and sil.master_ai_id(+)=si.master_ai_id
   and silc.subject_item_id(+)=si.subject_item_id
   and silc.subject_item_category_code(+)=si.subject_item_category_code
   and silc.int_doc_id(+)=si.int_doc_id
   and silc.master_ai_id(+)=si.master_ai_id
   and owner_id.int_doc_id = si.int_doc_id
   and owner_id.master_ai_id = si.master_ai_id
   and upper(owner_id.alternate_ai_name) = upper(si.subject_item_desc);
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_facilities1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);

 execute immediate 'truncate table ustb.onestop_ust_locations1';
 insert into onestop_ust_locations1
 select to_number(trim(si.subject_item_designation)) id,
        si.master_ai_id ai_id,
        upper(substr(si.subject_item_desc,1,50)) name,
        upper(substr(si_l.physical_address_line_1,1,50)) address1,
        upper(substr(si_l.physical_address_line_2,1,50)) address2,
        upper(substr(si_l.physical_address_municipality,1,50)) city,
        si_l.physical_address_state_code state,
        si_l.physical_address_zip zip,
        upper(substr(m_pc.parish_or_county_desc,1,25)) county,
        ltrim(si_l.region_code,'0') district,
        si_ll.latitude_degrees lat_degrees,
        si_ll.latitude_minutes lat_minutes,
        si_ll.latitude_seconds lat_seconds,
        si_ll.longitude_degrees lon_degrees,
        si_ll.longitude_minutes lon_minutes,
        si_ll.longitude_seconds lon_seconds,
        si_ll.latitude_dec_degrees lat_degrees_decimal,
        si_ll.longitude_dec_degrees lon_degrees_decimal,
        si_ll.collected_date ll_date,
        m_cs.coordinate_system_desc ll_method,
        m_rp.ref_point_desc ll_description,
        m_co.coordinate_org_desc ll_datum,
        si_ll.accuracy_desc ll_accuracy,
        si.user_last_updt user_modified,
        si.tmsp_last_updt date_modified
 from tempo.subject_item si,
 tempo.subj_item_loc_lat_long si_ll, tempo.subj_item_location si_l,
 tempo.subj_item_loc_gov_within si_lgw, tempo.mtb_parish_county m_pc,
 tempo.mtb_coord_org m_co, tempo.mtb_reference_point m_rp,
 tempo.mtb_geom_type m_gt, tempo.mtb_coord_system m_cs
 where (si.subject_item_type_code='GPTK'
  and si.subject_item_category_code='GPTF'
  and si.int_doc_id=0)
  and ustb.func_isnumeric(si.subject_item_designation) = 'TRUE'
  and ((si_ll.int_doc_id(+)=si_l.int_doc_id
  and si_ll.subject_item_id(+)=si_l.subject_item_id
  and si_ll.subject_item_category_code(+)=si_l.subject_item_category_code
  and si_ll.master_ai_id(+)=si_l.master_ai_id)
  and (si_l.subject_item_id(+)=si.subject_item_id
  and si_l.subject_item_category_code(+)=si.subject_item_category_code
  and si_l.int_doc_id(+)=si.int_doc_id
  and si_l.master_ai_id(+)=si.master_ai_id)
  and (si_lgw.subject_item_id(+)=si.subject_item_id
  and si_lgw.subject_item_category_code(+)= si.subject_item_category_code
  and si_lgw.int_doc_id(+)=si.int_doc_id
  and si_lgw.master_ai_id(+)=si.master_ai_id)
  and (si_lgw.parish_or_county_code=m_pc.parish_or_county_code (+)))
  and (si_ll.geom_type_code = m_gt.geom_type_code(+))
  and (si_ll.method_code = m_cs.coordinate_system_code(+))
  and (si_ll.datum_code = m_co.coordinate_org_code(+))
  and (si_ll.reference_point_code = m_rp.ref_point_code(+));
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_ust_locations1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);

 execute immediate 'truncate table ustb.onestop_owners1';
 insert into ustb.onestop_owners1
 select to_number(trim(oalt.alternate_org_id)) id,
        to_number(null) per_id,
        oalt.master_org_id org_id,
        substr(upper(oalt.alternate_org_name),1,50) owner_name,
        substr(upper(oa.mailing_address_line_1),1,50) address1,
        substr(upper(oa.mailing_address_line_2),1,50) address2,
        substr(upper(oa.mailing_address_municipality),1,25) city,
        oa.mailing_address_state_code state,
        substr(oa.mailing_address_zip,1,5) zip,
        substr(ot.address_or_phone,1,15) phone_number,
        oalt.start_date date_created,
        upper(oalt.user_last_updt) user_modified,
        oalt.tmsp_last_updt date_modified
 from tempo.organization_alt oalt, tempo.organization_address oa,
     tempo.organization_telecom ot
 where oalt.int_doc_id = 0
  and oalt.user_group_id = '084'
  and oalt.end_date is null
  and ustb.func_isnumeric(oalt.alternate_org_id) = 'TRUE'
  and oa.master_org_id(+)=oalt.master_org_id
  and oa.int_doc_id(+)=oalt.int_doc_id
  and ot.master_org_id(+) = oalt.master_org_id
  and ot.int_doc_id(+) = oalt.int_doc_id
  and ot.telecom_type_code(+) = 'WP'
 union
 select to_number(trim(palt.alternate_person_id)) id,
        palt.master_person_id per_id,
        to_number(null) org_id,
        substr(upper(palt.alternate_person_last_name||' '||
        decode(palt.alternate_person_first_name,null,null,palt.alternate_person_first_name)||
        ' '||decode(palt.alternate_person_mid_initial,null,null,
        palt.alternate_person_mid_initial)),1,50) owner_name,
        substr(upper(pa.mailing_address_line_1),1,50) address1,
        substr(upper(pa.mailing_address_line_2),1,50) address2,
        substr(upper(pa.mailing_address_municipality),1,25) city,
        pa.mailing_address_state_code state,
        substr(pa.mailing_address_zip,1,5) zip,
        substr(pt.address_or_phone,1,15) phone_number,
        palt.start_date date_created,
        upper(palt.user_last_updt) user_modified,
        palt.tmsp_last_updt date_modified
 from  tempo.person_alt palt, tempo.person_address pa,
   tempo.person_telecom pt
 where palt.int_doc_id = 0
  and palt.user_group_id = '084'
  and palt.end_date is null
  and ustb.func_isnumeric(palt.alternate_person_id) = 'TRUE'
  and pa.master_person_id(+)=palt.master_person_id
  and pa.int_doc_id(+)=palt.int_doc_id
  and pt.master_person_id(+) = palt.master_person_id
  and pt.int_doc_id(+) = palt.int_doc_id
  and pt.telecom_type_code(+) = 'WP';
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_owners1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);

 execute immediate 'truncate table ustb.onestop_operators1';
 insert into ustb.onestop_operators1
 select 'O' || to_char(oalt.master_org_id) id,
        substr(upper(oalt.alternate_org_name),1,50) operator_name,
        substr(upper(oa.mailing_address_line_1),1,50) address1,
        substr(upper(oa.mailing_address_line_2),1,50) address2,
        substr(upper(oa.mailing_address_municipality),1,25) city,
        oa.mailing_address_state_code state,
        substr(oa.mailing_address_zip,1,5) zip,
        substr(ot.address_or_phone,1,15) phone_number,
        oalt.start_date date_created,
        upper(oalt.user_last_updt) user_modified,
        oalt.tmsp_last_updt date_modified
 from tempo.organization_alt oalt, tempo.organization_address oa,
     tempo.organization_telecom ot
 where oalt.int_doc_id = 0
  and oalt.user_group_id = '100'
  and oalt.end_date is null
  and oa.master_org_id(+)=oalt.master_org_id
  and oa.int_doc_id(+)=oalt.int_doc_id
  and ot.master_org_id(+) = oalt.master_org_id
  and ot.int_doc_id(+) = oalt.int_doc_id
  and ot.telecom_type_code(+) = 'WP'
 union
 select 'P' || to_char(palt.master_person_id) id,
        substr(upper(palt.alternate_person_last_name||' '||
        decode(palt.alternate_person_first_name,null,null,palt.alternate_person_first_name)||
        ' '||decode(palt.alternate_person_mid_initial,null,null,
        palt.alternate_person_mid_initial)),1,50) operator_name,
        substr(upper(pa.mailing_address_line_1),1,50) address1,
        substr(upper(pa.mailing_address_line_2),1,50) address2,
        substr(upper(pa.mailing_address_municipality),1,25) city,
        pa.mailing_address_state_code state,
        substr(pa.mailing_address_zip,1,5) zip,
        substr(pt.address_or_phone,1,15) phone_number,
        palt.start_date date_created,
        upper(palt.user_last_updt) user_modified,
        palt.tmsp_last_updt date_modified
 from tempo.person_alt palt, tempo.person_address pa,
   tempo.person_telecom pt
 where palt.int_doc_id = 0
  and palt.user_group_id = '100'
  and palt.end_date is null
  and pa.master_person_id(+) = palt.master_person_id
  and pa.int_doc_id(+)=palt.int_doc_id
  and pt.master_person_id(+) = palt.master_person_id
  and pt.int_doc_id(+) = palt.int_doc_id
  and pt.telecom_type_code(+) = 'WP';
  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
             || ' onestop_operators1 records inserted '
             || to_char(SQL%ROWCOUNT);
  write_log (l_pkg_proc, l_description);


  ustx.mview_refresh.main;

  l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.onestop_mview_refresh.main end';
  write_log (l_pkg_proc, l_description);
  EXCEPTION
    WHEN OTHERS then
      l_description := to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') || ' ustb.onestop_data_refresh.main error';
      write_log (l_pkg_proc, l_description);
END main;
PROCEDURE write_log (
  p_pkg_proc               in   varchar2,
  p_description            in   varchar2)
IS
BEGIN
   l_ErrorCode := SQLCODE;
   l_ErrorMsg  := SUBSTR(SQLERRM,1,240);
   insert into ustb.onestop_log_table (pkg_proc, code, message, description)
   values (p_pkg_proc, l_errorcode, l_errormsg, p_description);
   commit;
END write_log;
END;

/

--------------------------------------------------------
--  DDL for Procedure FOD_PR_INSPECTIONS_DUE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "USTB"."FOD_PR_INSPECTIONS_DUE" 
(p_district in varchar2,
 p_field_office in varchar2,
 out_result in out ustb.fod_pk_inspections_due.result_set)
 as
 begin
  open out_result
  for 
SELECT "AGENCY_INTEREST"."MASTER_AI_NAME",   
 "AGENCY_INTEREST"."MASTER_AI_ID",
 "MTB_REGION"."REGION_DESC",
 "MTB_REGION"."REGION_CODE",
 "MTB_FIELD_OFFICE"."FIELD_OFFICE_DESC",
 "MTB_FIELD_OFFICE"."FIELD_OFFICE_CODE",
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_LINE_1",   
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_LINE_2",   
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_LINE_3",   
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_MUNICIPALITY",   
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_STATE_CODE",   
 "AGENCY_INTEREST_ADDRESS"."PHYSICAL_ADDRESS_ZIP",   
 "PERSON"."MASTER_PERSON_ID",
 "PERSON"."MASTER_PERSON_FIRST_NAME",
 "PERSON"."MASTER_PERSON_LAST_NAME",
 "COMPL_EVAL_HDR"."START_DATE" AS "LAST_INSPECTED",
 "COMPL_EVAL_HDR"."START_DATE" + 365 AS "NEXT_DUE",
 TRUNC("COMPL_EVAL_HDR"."START_DATE" + 365) - TRUNC(SYSDATE) AS "DAYS",
 ustb.func_get_fod_num_permits("AGENCY_INTEREST"."MASTER_AI_ID") AS "PERMITS", 
 "PERSON2"."MASTER_PERSON_ID",
 "PERSON2"."MASTER_PERSON_FIRST_NAME" AS "ENV_PERSON_FIRST_NAME",
 "PERSON2"."MASTER_PERSON_LAST_NAME" AS "ENV_PERSON_LAST_NAME",
 ustb.func_get_fod_ai_names("AGENCY_INTEREST"."MASTER_AI_ID") AS "FACILITY_TYPE"
FROM "AGENCY_INTEREST",  
 "AGENCY_INTEREST_ADDRESS", 
 "DSK_CENTRAL_FILE",
 "MTB_REGION",   
 "MTB_FIELD_OFFICE",
 "COMPL_EVAL_HDR",
 "PERSON",
 "PERSON" "PERSON2"
WHERE "AGENCY_INTEREST"."MASTER_AI_ID" = "DSK_CENTRAL_FILE"."MASTER_AI_ID" and  
      "AGENCY_INTEREST"."MASTER_AI_ID" = "AGENCY_INTEREST_ADDRESS"."MASTER_AI_ID" and 
      "AGENCY_INTEREST"."INT_DOC_ID" = "AGENCY_INTEREST_ADDRESS"."INT_DOC_ID" and 
      agency_interest_address.physical_region_code = p_district and
      agency_interest_address.physical_field_office_code = p_field_office and
      "MTB_REGION"."REGION_CODE" = "AGENCY_INTEREST_ADDRESS"."PHYSICAL_REGION_CODE" and  
      "MTB_FIELD_OFFICE"."FIELD_OFFICE_CODE" = "AGENCY_INTEREST_ADDRESS"."PHYSICAL_FIELD_OFFICE_CODE" and
      "AGENCY_INTEREST"."INT_DOC_ID" = 0 AND 
      ustb.func_is_fod_active_facility("AGENCY_INTEREST"."MASTER_AI_ID") = 'Y' AND
      "DSK_CENTRAL_FILE"."ACTIVITY_CLASS_CODE" = 'CMI' AND
      "DSK_CENTRAL_FILE"."PROGRAM_CODE" = '40' AND  
      "DSK_CENTRAL_FILE"."DOC_TYPE_SPECIFIC_CODE" <> 'AAAAAA' AND  
      "DSK_CENTRAL_FILE"."LOCKED_FLAG" = 'Y' and
      "DSK_CENTRAL_FILE"."INT_DOC_ID" = "COMPL_EVAL_HDR"."INT_DOC_ID" and
      "COMPL_EVAL_HDR"."COMP_EVAL_TYPE_CODE" IN ('A067', 'A088') AND
      "COMPL_EVAL_HDR"."START_DATE" = 
      (SELECT MAX("COMPL_EVAL_HDR2"."START_DATE")
       FROM "COMPL_EVAL_HDR" "COMPL_EVAL_HDR2",
         "DSK_CENTRAL_FILE" "DSK_CENTRAL_FILE2"
       WHERE "DSK_CENTRAL_FILE"."MASTER_AI_ID" = "DSK_CENTRAL_FILE2"."MASTER_AI_ID" AND
	 "DSK_CENTRAL_FILE2"."ACTIVITY_CLASS_CODE" = 'CMI' AND
	 "DSK_CENTRAL_FILE2"."PROGRAM_CODE" = '40' AND  
	 "DSK_CENTRAL_FILE2"."DOC_TYPE_SPECIFIC_CODE" <> 'AAAAAA' AND  
         "DSK_CENTRAL_FILE2"."LOCKED_FLAG" = 'Y' AND
         "DSK_CENTRAL_FILE2"."INT_DOC_ID" = "COMPL_EVAL_HDR2"."INT_DOC_ID" AND
         "COMPL_EVAL_HDR2"."COMP_EVAL_TYPE_CODE" in ('A067', 'A088')) AND
      TRUNC("COMPL_EVAL_HDR"."START_DATE") + 365 < TRUNC(SYSDATE) + 30 AND
      "PERSON"."MASTER_PERSON_ID" (+) = "COMPL_EVAL_HDR"."LEAD_INVESTIGATOR_ID" AND
      "PERSON"."INT_DOC_ID"(+) = 0 AND
      "PERSON2"."MASTER_PERSON_ID" (+) = ustb.func_get_fod_per_contact("AGENCY_INTEREST"."MASTER_AI_ID") AND
      "PERSON2"."INT_DOC_ID"(+) = 0;
end fod_pr_inspections_due;

/

--------------------------------------------------------
--  DDL for Procedure PSTB_PR_RELEASES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "USTB"."PSTB_PR_RELEASES" 
 (p_staff in varchar2,
  out_result in out ustb.pstb_pk_releases.result_set)
 as
  a_staff varchar2(50);
 begin
  a_staff :=  '%' || upper(p_staff) || '%';
  open out_result
  for select * from ustb.onestop_lust_releases1
  where staff_name like a_staff;
end pstb_pr_releases;

/

